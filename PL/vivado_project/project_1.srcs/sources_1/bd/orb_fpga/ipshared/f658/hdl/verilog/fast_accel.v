// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fast_accel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.531000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=53,HLS_SYN_DSP=4,HLS_SYN_FF=144454,HLS_SYN_LUT=46349,HLS_VERSION=2018_3}" *)

module fast_accel (
        ap_clk,
        ap_rst_n,
        srcStream_V_V_TDATA,
        srcStream_V_V_TVALID,
        srcStream_V_V_TREADY,
        MomentsStreamOut_V_V_TDATA,
        MomentsStreamOut_V_V_TVALID,
        MomentsStreamOut_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input  [7:0] srcStream_V_V_TDATA;
input   srcStream_V_V_TVALID;
output   srcStream_V_V_TREADY;
output  [87:0] MomentsStreamOut_V_V_TDATA;
output   MomentsStreamOut_V_V_TVALID;
input   MomentsStreamOut_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [7:0] srcStream_V_V_0_data_out;
wire    srcStream_V_V_0_vld_in;
wire    srcStream_V_V_0_vld_out;
wire    srcStream_V_V_0_ack_in;
reg    srcStream_V_V_0_ack_out;
reg   [7:0] srcStream_V_V_0_payload_A;
reg   [7:0] srcStream_V_V_0_payload_B;
reg    srcStream_V_V_0_sel_rd;
reg    srcStream_V_V_0_sel_wr;
wire    srcStream_V_V_0_sel;
wire    srcStream_V_V_0_load_A;
wire    srcStream_V_V_0_load_B;
reg   [1:0] srcStream_V_V_0_state;
wire    srcStream_V_V_0_state_cmp_full;
reg   [87:0] MomentsStreamOut_V_V_1_data_in;
reg   [87:0] MomentsStreamOut_V_V_1_data_out;
reg    MomentsStreamOut_V_V_1_vld_in;
wire    MomentsStreamOut_V_V_1_vld_out;
wire    MomentsStreamOut_V_V_1_ack_in;
wire    MomentsStreamOut_V_V_1_ack_out;
reg   [87:0] MomentsStreamOut_V_V_1_payload_A;
reg   [87:0] MomentsStreamOut_V_V_1_payload_B;
reg    MomentsStreamOut_V_V_1_sel_rd;
reg    MomentsStreamOut_V_V_1_sel_wr;
wire    MomentsStreamOut_V_V_1_sel;
wire    MomentsStreamOut_V_V_1_load_A;
wire    MomentsStreamOut_V_V_1_load_B;
reg   [1:0] MomentsStreamOut_V_V_1_state;
wire    MomentsStreamOut_V_V_1_state_cmp_full;
wire   [1:0] p_image_height_address0;
reg    p_image_height_ce0;
wire   [8:0] p_image_height_q0;
wire   [1:0] p_image_width_address0;
reg    p_image_width_ce0;
wire   [9:0] p_image_width_q0;
reg    srcStream_V_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    MomentsStreamOut_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [87:0] img_level2_V_fu_85_p1;
reg   [8:0] p_image_height_load_reg_119;
reg   [9:0] p_image_width_load_reg_124;
wire   [10:0] extLd_cast_fu_96_p1;
reg   [10:0] extLd_cast_reg_129;
wire    ap_CS_fsm_state3;
wire   [11:0] extLd1_cast_fu_100_p1;
reg   [11:0] extLd1_cast_reg_134;
wire   [87:0] grp_myFAST_fu_75_MomentsStreamOut_V_V_TDATA;
wire    grp_myFAST_fu_75_src_V_V_TVALID;
wire    grp_myFAST_fu_75_src_V_V_TREADY;
wire    grp_myFAST_fu_75_MomentsStreamOut_V_V_TVALID;
wire    grp_myFAST_fu_75_MomentsStreamOut_V_V_TREADY;
wire    grp_myFAST_fu_75_ap_start;
wire    grp_myFAST_fu_75_ap_done;
wire    grp_myFAST_fu_75_ap_ready;
wire    grp_myFAST_fu_75_ap_idle;
reg    grp_myFAST_fu_75_ap_continue;
reg    grp_myFAST_fu_75_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_myFAST_fu_75_ap_ready;
wire    ap_sync_grp_myFAST_fu_75_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_sync_reg_grp_myFAST_fu_75_ap_ready;
reg    ap_sync_reg_grp_myFAST_fu_75_ap_done;
wire   [63:0] tmp_s_fu_90_p1;
reg   [4:0] ap_NS_fsm;
wire    ap_CS_fsm_state5;

// power-on initialization
initial begin
#0 srcStream_V_V_0_sel_rd = 1'b0;
#0 srcStream_V_V_0_sel_wr = 1'b0;
#0 srcStream_V_V_0_state = 2'd0;
#0 MomentsStreamOut_V_V_1_sel_rd = 1'b0;
#0 MomentsStreamOut_V_V_1_sel_wr = 1'b0;
#0 MomentsStreamOut_V_V_1_state = 2'd0;
#0 ap_CS_fsm = 5'd1;
#0 grp_myFAST_fu_75_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_myFAST_fu_75_ap_ready = 1'b0;
#0 ap_sync_reg_grp_myFAST_fu_75_ap_done = 1'b0;
end

fast_accel_p_imagHfu #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
p_image_height_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_image_height_address0),
    .ce0(p_image_height_ce0),
    .q0(p_image_height_q0)
);

fast_accel_p_imagIfE #(
    .DataWidth( 10 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
p_image_width_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_image_width_address0),
    .ce0(p_image_width_ce0),
    .q0(p_image_width_q0)
);

myFAST grp_myFAST_fu_75(
    .src_V_V_TDATA(srcStream_V_V_0_data_out),
    .MomentsStreamOut_V_V_TDATA(grp_myFAST_fu_75_MomentsStreamOut_V_V_TDATA),
    .p_image_height(extLd_cast_reg_129),
    .p_image_width(extLd1_cast_reg_134),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .src_V_V_TVALID(grp_myFAST_fu_75_src_V_V_TVALID),
    .src_V_V_TREADY(grp_myFAST_fu_75_src_V_V_TREADY),
    .MomentsStreamOut_V_V_TVALID(grp_myFAST_fu_75_MomentsStreamOut_V_V_TVALID),
    .MomentsStreamOut_V_V_TREADY(grp_myFAST_fu_75_MomentsStreamOut_V_V_TREADY),
    .p_image_height_ap_vld(1'b1),
    .p_image_width_ap_vld(1'b1),
    .ap_start(grp_myFAST_fu_75_ap_start),
    .ap_done(grp_myFAST_fu_75_ap_done),
    .ap_ready(grp_myFAST_fu_75_ap_ready),
    .ap_idle(grp_myFAST_fu_75_ap_idle),
    .ap_continue(grp_myFAST_fu_75_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MomentsStreamOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == MomentsStreamOut_V_V_1_ack_out) & (1'b1 == MomentsStreamOut_V_V_1_vld_out))) begin
            MomentsStreamOut_V_V_1_sel_rd <= ~MomentsStreamOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MomentsStreamOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == MomentsStreamOut_V_V_1_ack_in) & (1'b1 == MomentsStreamOut_V_V_1_vld_in))) begin
            MomentsStreamOut_V_V_1_sel_wr <= ~MomentsStreamOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        MomentsStreamOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == MomentsStreamOut_V_V_1_state) & (1'b0 == MomentsStreamOut_V_V_1_vld_in)) | ((2'd3 == MomentsStreamOut_V_V_1_state) & (1'b0 == MomentsStreamOut_V_V_1_vld_in) & (1'b1 == MomentsStreamOut_V_V_1_ack_out)))) begin
            MomentsStreamOut_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == MomentsStreamOut_V_V_1_state) & (1'b0 == MomentsStreamOut_V_V_1_ack_out)) | ((2'd3 == MomentsStreamOut_V_V_1_state) & (1'b0 == MomentsStreamOut_V_V_1_ack_out) & (1'b1 == MomentsStreamOut_V_V_1_vld_in)))) begin
            MomentsStreamOut_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == MomentsStreamOut_V_V_1_vld_in) & (1'b1 == MomentsStreamOut_V_V_1_ack_out)) & ~((1'b0 == MomentsStreamOut_V_V_1_ack_out) & (1'b1 == MomentsStreamOut_V_V_1_vld_in)) & (2'd3 == MomentsStreamOut_V_V_1_state)) | ((2'd1 == MomentsStreamOut_V_V_1_state) & (1'b1 == MomentsStreamOut_V_V_1_ack_out)) | ((2'd2 == MomentsStreamOut_V_V_1_state) & (1'b1 == MomentsStreamOut_V_V_1_vld_in)))) begin
            MomentsStreamOut_V_V_1_state <= 2'd3;
        end else begin
            MomentsStreamOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myFAST_fu_75_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_myFAST_fu_75_ap_done <= 1'b0;
        end else if ((grp_myFAST_fu_75_ap_done == 1'b1)) begin
            ap_sync_reg_grp_myFAST_fu_75_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myFAST_fu_75_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_myFAST_fu_75_ap_ready <= 1'b0;
        end else if ((grp_myFAST_fu_75_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_myFAST_fu_75_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myFAST_fu_75_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_myFAST_fu_75_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_myFAST_fu_75_ap_start_reg <= 1'b1;
        end else if ((grp_myFAST_fu_75_ap_ready == 1'b1)) begin
            grp_myFAST_fu_75_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        srcStream_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((srcStream_V_V_0_ack_out == 1'b1) & (srcStream_V_V_0_vld_out == 1'b1))) begin
            srcStream_V_V_0_sel_rd <= ~srcStream_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        srcStream_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((srcStream_V_V_0_ack_in == 1'b1) & (srcStream_V_V_0_vld_in == 1'b1))) begin
            srcStream_V_V_0_sel_wr <= ~srcStream_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        srcStream_V_V_0_state <= 2'd0;
    end else begin
        if ((((srcStream_V_V_0_state == 2'd2) & (srcStream_V_V_0_vld_in == 1'b0)) | ((srcStream_V_V_0_state == 2'd3) & (srcStream_V_V_0_vld_in == 1'b0) & (srcStream_V_V_0_ack_out == 1'b1)))) begin
            srcStream_V_V_0_state <= 2'd2;
        end else if ((((srcStream_V_V_0_state == 2'd1) & (srcStream_V_V_0_ack_out == 1'b0)) | ((srcStream_V_V_0_state == 2'd3) & (srcStream_V_V_0_ack_out == 1'b0) & (srcStream_V_V_0_vld_in == 1'b1)))) begin
            srcStream_V_V_0_state <= 2'd1;
        end else if (((~((srcStream_V_V_0_vld_in == 1'b0) & (srcStream_V_V_0_ack_out == 1'b1)) & ~((srcStream_V_V_0_ack_out == 1'b0) & (srcStream_V_V_0_vld_in == 1'b1)) & (srcStream_V_V_0_state == 2'd3)) | ((srcStream_V_V_0_state == 2'd1) & (srcStream_V_V_0_ack_out == 1'b1)) | ((srcStream_V_V_0_state == 2'd2) & (srcStream_V_V_0_vld_in == 1'b1)))) begin
            srcStream_V_V_0_state <= 2'd3;
        end else begin
            srcStream_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MomentsStreamOut_V_V_1_load_A)) begin
        MomentsStreamOut_V_V_1_payload_A <= MomentsStreamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == MomentsStreamOut_V_V_1_load_B)) begin
        MomentsStreamOut_V_V_1_payload_B <= MomentsStreamOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        extLd1_cast_reg_134[9 : 0] <= extLd1_cast_fu_100_p1[9 : 0];
        extLd_cast_reg_129[8 : 0] <= extLd_cast_fu_96_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == MomentsStreamOut_V_V_1_ack_in) & (1'b1 == ap_CS_fsm_state2))) begin
        p_image_height_load_reg_119 <= p_image_height_q0;
        p_image_width_load_reg_124 <= p_image_width_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((srcStream_V_V_0_load_A == 1'b1)) begin
        srcStream_V_V_0_payload_A <= srcStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((srcStream_V_V_0_load_B == 1'b1)) begin
        srcStream_V_V_0_payload_B <= srcStream_V_V_TDATA;
    end
end

always @ (*) begin
    if (((srcStream_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        MomentsStreamOut_V_V_1_data_in = img_level2_V_fu_85_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_myFAST_fu_75_MomentsStreamOut_V_V_TVALID == 1'b1))) begin
        MomentsStreamOut_V_V_1_data_in = grp_myFAST_fu_75_MomentsStreamOut_V_V_TDATA;
    end else begin
        MomentsStreamOut_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == MomentsStreamOut_V_V_1_sel)) begin
        MomentsStreamOut_V_V_1_data_out = MomentsStreamOut_V_V_1_payload_B;
    end else begin
        MomentsStreamOut_V_V_1_data_out = MomentsStreamOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == MomentsStreamOut_V_V_1_ack_in) | (srcStream_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        MomentsStreamOut_V_V_1_vld_in = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        MomentsStreamOut_V_V_1_vld_in = grp_myFAST_fu_75_MomentsStreamOut_V_V_TVALID;
    end else begin
        MomentsStreamOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        MomentsStreamOut_V_V_TDATA_blk_n = MomentsStreamOut_V_V_1_state[1'd1];
    end else begin
        MomentsStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_myFAST_fu_75_ap_continue = 1'b1;
    end else begin
        grp_myFAST_fu_75_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == MomentsStreamOut_V_V_1_ack_in) | (srcStream_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_image_height_ce0 = 1'b1;
    end else begin
        p_image_height_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == MomentsStreamOut_V_V_1_ack_in) | (srcStream_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_image_width_ce0 = 1'b1;
    end else begin
        p_image_width_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == MomentsStreamOut_V_V_1_ack_in) | (srcStream_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcStream_V_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        srcStream_V_V_0_ack_out = grp_myFAST_fu_75_src_V_V_TREADY;
    end else begin
        srcStream_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((srcStream_V_V_0_sel == 1'b1)) begin
        srcStream_V_V_0_data_out = srcStream_V_V_0_payload_B;
    end else begin
        srcStream_V_V_0_data_out = srcStream_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        srcStream_V_V_TDATA_blk_n = srcStream_V_V_0_state[1'd0];
    end else begin
        srcStream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == MomentsStreamOut_V_V_1_ack_in) | (srcStream_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == MomentsStreamOut_V_V_1_ack_in) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == MomentsStreamOut_V_V_1_ack_in) & (MomentsStreamOut_V_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MomentsStreamOut_V_V_1_ack_in = MomentsStreamOut_V_V_1_state[1'd1];

assign MomentsStreamOut_V_V_1_ack_out = MomentsStreamOut_V_V_TREADY;

assign MomentsStreamOut_V_V_1_load_A = (~MomentsStreamOut_V_V_1_sel_wr & MomentsStreamOut_V_V_1_state_cmp_full);

assign MomentsStreamOut_V_V_1_load_B = (MomentsStreamOut_V_V_1_state_cmp_full & MomentsStreamOut_V_V_1_sel_wr);

assign MomentsStreamOut_V_V_1_sel = MomentsStreamOut_V_V_1_sel_rd;

assign MomentsStreamOut_V_V_1_state_cmp_full = ((MomentsStreamOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign MomentsStreamOut_V_V_1_vld_out = MomentsStreamOut_V_V_1_state[1'd0];

assign MomentsStreamOut_V_V_TDATA = MomentsStreamOut_V_V_1_data_out;

assign MomentsStreamOut_V_V_TVALID = MomentsStreamOut_V_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_myFAST_fu_75_ap_ready & ap_sync_grp_myFAST_fu_75_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_myFAST_fu_75_ap_done = (grp_myFAST_fu_75_ap_done | ap_sync_reg_grp_myFAST_fu_75_ap_done);

assign ap_sync_grp_myFAST_fu_75_ap_ready = (grp_myFAST_fu_75_ap_ready | ap_sync_reg_grp_myFAST_fu_75_ap_ready);

assign extLd1_cast_fu_100_p1 = p_image_width_load_reg_124;

assign extLd_cast_fu_96_p1 = p_image_height_load_reg_119;

assign grp_myFAST_fu_75_MomentsStreamOut_V_V_TREADY = (ap_CS_fsm_state4 & MomentsStreamOut_V_V_1_ack_in);

assign grp_myFAST_fu_75_ap_start = grp_myFAST_fu_75_ap_start_reg;

assign grp_myFAST_fu_75_src_V_V_TVALID = srcStream_V_V_0_state[1'd0];

assign img_level2_V_fu_85_p1 = srcStream_V_V_0_data_out;

assign p_image_height_address0 = tmp_s_fu_90_p1;

assign p_image_width_address0 = tmp_s_fu_90_p1;

assign srcStream_V_V_0_ack_in = srcStream_V_V_0_state[1'd1];

assign srcStream_V_V_0_load_A = (srcStream_V_V_0_state_cmp_full & ~srcStream_V_V_0_sel_wr);

assign srcStream_V_V_0_load_B = (srcStream_V_V_0_state_cmp_full & srcStream_V_V_0_sel_wr);

assign srcStream_V_V_0_sel = srcStream_V_V_0_sel_rd;

assign srcStream_V_V_0_state_cmp_full = ((srcStream_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign srcStream_V_V_0_vld_in = srcStream_V_V_TVALID;

assign srcStream_V_V_0_vld_out = srcStream_V_V_0_state[1'd0];

assign srcStream_V_V_TREADY = srcStream_V_V_0_state[1'd1];

assign tmp_s_fu_90_p1 = srcStream_V_V_0_data_out;

always @ (posedge ap_clk) begin
    extLd_cast_reg_129[10:9] <= 2'b00;
    extLd1_cast_reg_134[11:10] <= 2'b00;
end

endmodule //fast_accel
