// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MCFilter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        datapackStreamIn_V_V_dout,
        datapackStreamIn_V_V_empty_n,
        datapackStreamIn_V_V_read,
        MomentsStreamOut_V_V_TDATA,
        MomentsStreamOut_V_V_TVALID,
        MomentsStreamOut_V_V_TREADY,
        img_height_dout,
        img_height_empty_n,
        img_height_read,
        img_width_dout,
        img_width_empty_n,
        img_width_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] datapackStreamIn_V_V_dout;
input   datapackStreamIn_V_V_empty_n;
output   datapackStreamIn_V_V_read;
output  [87:0] MomentsStreamOut_V_V_TDATA;
output   MomentsStreamOut_V_V_TVALID;
input   MomentsStreamOut_V_V_TREADY;
input  [10:0] img_height_dout;
input   img_height_empty_n;
output   img_height_read;
input  [11:0] img_width_dout;
input   img_width_empty_n;
output   img_width_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg datapackStreamIn_V_V_read;
reg MomentsStreamOut_V_V_TVALID;
reg img_height_read;
reg img_width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    datapackStreamIn_V_V_blk_n;
wire    ap_CS_fsm_state7;
reg    MomentsStreamOut_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state8;
reg    img_height_blk_n;
reg    img_width_blk_n;
reg   [10:0] img_height_read_reg_282;
reg    ap_block_state1;
reg   [11:0] img_width_read_reg_287;
wire    ap_CS_fsm_state2;
wire   [15:0] extLd9_fu_152_p1;
reg   [15:0] extLd9_reg_303;
wire    ap_CS_fsm_state5;
wire   [22:0] grp_fu_276_p2;
reg   [22:0] bound_reg_308;
wire   [22:0] indvar_flatten_next_fu_160_p2;
reg   [22:0] indvar_flatten_next_reg_316;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_i4_fu_166_p2;
reg   [0:0] exitcond_i4_reg_321;
wire   [0:0] exitcond_flatten_fu_155_p2;
wire   [15:0] val_assign_mid2_fu_171_p3;
reg   [15:0] val_assign_mid2_reg_327;
wire   [15:0] i2_fu_178_p2;
reg   [15:0] i2_reg_332;
reg   [7:0] score_V_reg_337;
wire   [47:0] momValIn_V_fu_204_p1;
reg   [47:0] momValIn_V_reg_342;
wire   [0:0] tmp_84_i_fu_208_p2;
reg   [0:0] tmp_84_i_reg_347;
wire   [0:0] tmp_85_i_fu_214_p2;
reg   [0:0] tmp_85_i_reg_352;
wire   [11:0] posX_V_fu_220_p1;
reg   [11:0] posX_V_reg_357;
wire   [31:0] count_fu_224_p2;
reg   [31:0] count_reg_362;
wire   [15:0] posY_V_mid2_v_fu_230_p3;
wire   [31:0] count_1_fu_264_p3;
wire   [15:0] j_fu_271_p2;
reg   [22:0] indvar_flatten_reg_99;
reg   [15:0] val_assign_4_reg_110;
reg   [31:0] count_1_i_reg_122;
reg   [15:0] val_assign_reg_134;
wire   [7:0] flag_fu_194_p4;
wire   [11:0] tmp_fu_236_p1;
wire   [0:0] or_cond_i_fu_240_p2;
wire   [87:0] p_Result_s_fu_244_p6;
wire   [10:0] grp_fu_276_p0;
wire   [11:0] grp_fu_276_p1;
wire    ap_CS_fsm_state9;
reg   [8:0] ap_NS_fsm;
wire   [22:0] grp_fu_276_p00;
wire   [22:0] grp_fu_276_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
end

fast_accel_mul_muDeQ #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 23 ))
fast_accel_mul_muDeQ_U206(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_276_p0),
    .din1(grp_fu_276_p1),
    .ce(1'b1),
    .dout(grp_fu_276_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == MomentsStreamOut_V_V_TREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        count_1_i_reg_122 <= count_1_fu_264_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        count_1_i_reg_122 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == MomentsStreamOut_V_V_TREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        indvar_flatten_reg_99 <= indvar_flatten_next_reg_316;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten_reg_99 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == MomentsStreamOut_V_V_TREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        val_assign_4_reg_110 <= posY_V_mid2_v_fu_230_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        val_assign_4_reg_110 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == MomentsStreamOut_V_V_TREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        val_assign_reg_134 <= j_fu_271_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        val_assign_reg_134 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bound_reg_308 <= grp_fu_276_p2;
        extLd9_reg_303[11 : 0] <= extLd9_fu_152_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((datapackStreamIn_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        count_reg_362 <= count_fu_224_p2;
        momValIn_V_reg_342 <= momValIn_V_fu_204_p1;
        posX_V_reg_357 <= posX_V_fu_220_p1;
        score_V_reg_337 <= {{datapackStreamIn_V_V_dout[63:56]}};
        tmp_84_i_reg_347 <= tmp_84_i_fu_208_p2;
        tmp_85_i_reg_352 <= tmp_85_i_fu_214_p2;
        val_assign_mid2_reg_327 <= val_assign_mid2_fu_171_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_flatten_fu_155_p2 == 1'd0))) begin
        exitcond_i4_reg_321 <= exitcond_i4_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((datapackStreamIn_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (exitcond_i4_reg_321 == 1'd1))) begin
        i2_reg_332 <= i2_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_read_reg_282 <= img_height_dout;
        img_width_read_reg_287 <= img_width_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_next_reg_316 <= indvar_flatten_next_fu_160_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        MomentsStreamOut_V_V_TDATA_blk_n = MomentsStreamOut_V_V_TREADY;
    end else begin
        MomentsStreamOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == MomentsStreamOut_V_V_TREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        MomentsStreamOut_V_V_TVALID = 1'b1;
    end else begin
        MomentsStreamOut_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        datapackStreamIn_V_V_blk_n = datapackStreamIn_V_V_empty_n;
    end else begin
        datapackStreamIn_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((datapackStreamIn_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        datapackStreamIn_V_V_read = 1'b1;
    end else begin
        datapackStreamIn_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_blk_n = img_height_empty_n;
    end else begin
        img_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_height_read = 1'b1;
    end else begin
        img_height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_blk_n = img_width_empty_n;
    end else begin
        img_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_read = 1'b1;
    end else begin
        img_width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_flatten_fu_155_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((datapackStreamIn_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == MomentsStreamOut_V_V_TREADY) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MomentsStreamOut_V_V_TDATA = ((or_cond_i_fu_240_p2[0:0] === 1'b1) ? p_Result_s_fu_244_p6 : 88'd0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((img_width_empty_n == 1'b0) | (img_height_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign count_1_fu_264_p3 = ((or_cond_i_fu_240_p2[0:0] === 1'b1) ? count_reg_362 : count_1_i_reg_122);

assign count_fu_224_p2 = (32'd1 + count_1_i_reg_122);

assign exitcond_flatten_fu_155_p2 = ((indvar_flatten_reg_99 == bound_reg_308) ? 1'b1 : 1'b0);

assign exitcond_i4_fu_166_p2 = ((val_assign_reg_134 == extLd9_reg_303) ? 1'b1 : 1'b0);

assign extLd9_fu_152_p1 = img_width_read_reg_287;

assign flag_fu_194_p4 = {{datapackStreamIn_V_V_dout[55:48]}};

assign grp_fu_276_p0 = grp_fu_276_p00;

assign grp_fu_276_p00 = img_height_read_reg_282;

assign grp_fu_276_p1 = grp_fu_276_p10;

assign grp_fu_276_p10 = img_width_read_reg_287;

assign i2_fu_178_p2 = (16'd1 + val_assign_4_reg_110);

assign indvar_flatten_next_fu_160_p2 = (indvar_flatten_reg_99 + 23'd1);

assign j_fu_271_p2 = (16'd1 + val_assign_mid2_reg_327);

assign momValIn_V_fu_204_p1 = datapackStreamIn_V_V_dout[47:0];

assign or_cond_i_fu_240_p2 = (tmp_85_i_reg_352 & tmp_84_i_reg_347);

assign p_Result_s_fu_244_p6 = {{{{{score_V_reg_337}, {8'd255}}, {tmp_fu_236_p1}}, {posX_V_reg_357}}, {momValIn_V_reg_342}};

assign posX_V_fu_220_p1 = val_assign_mid2_fu_171_p3[11:0];

assign posY_V_mid2_v_fu_230_p3 = ((exitcond_i4_reg_321[0:0] === 1'b1) ? i2_reg_332 : val_assign_4_reg_110);

assign tmp_84_i_fu_208_p2 = ((flag_fu_194_p4 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_85_i_fu_214_p2 = ((count_1_i_reg_122 < 32'd8191) ? 1'b1 : 1'b0);

assign tmp_fu_236_p1 = posY_V_mid2_v_fu_230_p3[11:0];

assign val_assign_mid2_fu_171_p3 = ((exitcond_i4_reg_321[0:0] === 1'b1) ? 16'd0 : val_assign_reg_134);

always @ (posedge ap_clk) begin
    extLd9_reg_303[15:12] <= 4'b0000;
end

endmodule //MCFilter
