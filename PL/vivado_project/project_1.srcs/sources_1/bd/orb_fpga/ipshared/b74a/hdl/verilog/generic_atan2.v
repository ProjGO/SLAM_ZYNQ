// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generic_atan2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_V,
        in2_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_pp0_stage0 = 29'd1024;
parameter    ap_ST_fsm_pp0_stage1 = 29'd2048;
parameter    ap_ST_fsm_pp0_stage2 = 29'd4096;
parameter    ap_ST_fsm_pp0_stage3 = 29'd8192;
parameter    ap_ST_fsm_pp0_stage4 = 29'd16384;
parameter    ap_ST_fsm_pp0_stage5 = 29'd32768;
parameter    ap_ST_fsm_pp0_stage6 = 29'd65536;
parameter    ap_ST_fsm_pp0_stage7 = 29'd131072;
parameter    ap_ST_fsm_state20 = 29'd262144;
parameter    ap_ST_fsm_state21 = 29'd524288;
parameter    ap_ST_fsm_state22 = 29'd1048576;
parameter    ap_ST_fsm_state23 = 29'd2097152;
parameter    ap_ST_fsm_state24 = 29'd4194304;
parameter    ap_ST_fsm_state25 = 29'd8388608;
parameter    ap_ST_fsm_state26 = 29'd16777216;
parameter    ap_ST_fsm_state27 = 29'd33554432;
parameter    ap_ST_fsm_state28 = 29'd67108864;
parameter    ap_ST_fsm_state29 = 29'd134217728;
parameter    ap_ST_fsm_state30 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] in1_V;
input  [23:0] in2_V;
output  [23:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[23:0] ap_return;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] cordic_apfixed_circ_address0;
reg    cordic_apfixed_circ_ce0;
wire   [125:0] cordic_apfixed_circ_q0;
reg   [30:0] p_Val2_5_reg_105;
reg   [30:0] p_Val2_3_reg_115;
reg   [30:0] p_Val2_2_reg_125;
reg   [4:0] ush_reg_137;
wire   [0:0] tmp_fu_183_p2;
reg   [0:0] tmp_reg_536;
wire   [0:0] tmp_s_fu_189_p2;
reg   [0:0] tmp_s_reg_543;
wire    ap_CS_fsm_state2;
wire   [1:0] signin1_V_fu_198_p3;
reg   [1:0] signin1_V_reg_554;
wire   [0:0] tmp_1_fu_205_p2;
reg   [0:0] tmp_1_reg_561;
wire   [0:0] tmp_2_fu_211_p2;
reg   [0:0] tmp_2_reg_568;
wire   [1:0] signin2_V_fu_220_p3;
reg   [1:0] signin2_V_reg_573;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_3_fu_227_p2;
reg   [0:0] tmp_3_reg_580;
wire   [0:0] or_cond_fu_232_p2;
reg   [0:0] or_cond_reg_586;
wire   [0:0] tmp_5_fu_237_p2;
reg   [0:0] tmp_5_reg_590;
wire    ap_CS_fsm_state4;
wire   [0:0] or_cond1_fu_242_p2;
reg   [0:0] or_cond1_reg_596;
wire   [0:0] tmp_7_fu_247_p2;
reg   [0:0] tmp_7_reg_600;
wire    ap_CS_fsm_state5;
wire   [0:0] or_cond2_fu_252_p2;
reg   [0:0] or_cond2_reg_605;
wire   [0:0] tmp_8_fu_257_p2;
reg   [0:0] tmp_8_reg_609;
wire    ap_CS_fsm_state6;
wire   [0:0] or_cond3_fu_262_p2;
reg   [0:0] or_cond3_reg_615;
wire  signed [24:0] in1abs_V_2_fu_271_p1;
reg  signed [24:0] in1abs_V_2_reg_622;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_9_fu_267_p2;
wire   [24:0] r_V_fu_274_p2;
reg   [24:0] r_V_reg_627;
wire  signed [24:0] in2abs_V_2_fu_280_p1;
reg  signed [24:0] in2abs_V_2_reg_632;
wire   [24:0] r_V_4_fu_283_p2;
reg   [24:0] r_V_4_reg_637;
wire   [23:0] p_s_fu_289_p3;
reg   [23:0] p_s_reg_642;
wire   [24:0] in1abs_V_fu_296_p3;
reg   [24:0] in1abs_V_reg_647;
wire    ap_CS_fsm_state8;
wire   [24:0] in2abs_V_fu_301_p3;
reg   [24:0] in2abs_V_reg_654;
wire   [0:0] tmp_4_fu_306_p2;
reg   [0:0] tmp_4_reg_661;
wire    ap_CS_fsm_state9;
wire  signed [30:0] x_V_cast_fu_323_p1;
wire    ap_CS_fsm_state10;
wire  signed [30:0] y_V_cast_fu_340_p1;
wire   [0:0] exitcond_i_fu_344_p2;
reg   [0:0] exitcond_i_reg_678;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state11_pp0_stage0_iter0;
wire    ap_block_state19_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] n_fu_350_p2;
reg   [4:0] n_reg_682;
reg    ap_enable_reg_pp0_iter0;
wire   [30:0] sh_assign_i_cast_fu_356_p1;
reg   [27:0] tmp_15_reg_698;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state12_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [30:0] p_2_i_fu_390_p2;
reg   [30:0] p_2_i_reg_703;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state13_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [30:0] p_5_i_fu_396_p2;
reg   [30:0] p_5_i_reg_708;
wire   [0:0] tmp_41_fu_402_p3;
reg   [0:0] tmp_41_reg_713;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state14_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [30:0] tz_V_fu_410_p3;
reg   [30:0] tz_V_reg_719;
wire   [30:0] grp_fu_360_p2;
reg   [30:0] r_V_5_reg_724;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state17_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [30:0] grp_fu_366_p2;
reg   [30:0] r_V_6_reg_730;
wire   [30:0] p_i_fu_416_p2;
reg   [30:0] p_i_reg_736;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state18_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [30:0] p_1_i_fu_421_p2;
reg   [30:0] p_1_i_reg_741;
wire   [30:0] p_3_i_fu_426_p2;
reg   [30:0] p_3_i_reg_746;
wire   [30:0] p_4_i_fu_431_p2;
reg   [30:0] p_4_i_reg_751;
wire   [30:0] ty_V_fu_436_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [30:0] tx_V_fu_441_p3;
wire   [30:0] z_V_fu_446_p2;
reg   [30:0] z_V_reg_766;
wire    ap_CS_fsm_state20;
wire   [0:0] or_cond4_fu_452_p2;
reg   [0:0] or_cond4_reg_771;
wire   [30:0] z_V_3_fu_456_p3;
reg   [30:0] z_V_3_reg_775;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
reg   [23:0] tmp_16_reg_794;
wire    ap_CS_fsm_state23;
reg   [23:0] tmp_14_reg_799;
wire    ap_CS_fsm_state25;
reg   [23:0] tmp_10_reg_804;
wire    ap_CS_fsm_state27;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
wire    ap_block_pp0_stage7_subdone;
reg   [30:0] ap_phi_mux_p_Val2_5_phi_fu_108_p4;
wire    ap_block_pp0_stage0;
reg   [30:0] ap_phi_mux_p_Val2_3_phi_fu_118_p4;
reg   [4:0] ap_phi_mux_ush_phi_fu_141_p4;
reg   [23:0] UnifiedRetVal_reg_148;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state24;
wire   [63:0] tmp_68_i_fu_372_p1;
wire  signed [23:0] tmp_fu_183_p0;
wire  signed [23:0] tmp_s_fu_189_p0;
wire   [1:0] phitmp_fu_195_p1;
wire  signed [23:0] tmp_1_fu_205_p0;
wire  signed [23:0] tmp_2_fu_211_p0;
wire   [1:0] phitmp1_fu_217_p1;
wire  signed [23:0] tmp_9_fu_267_p0;
wire  signed [23:0] tmp_9_fu_267_p1;
wire  signed [23:0] in1abs_V_2_fu_271_p0;
wire  signed [23:0] in2abs_V_2_fu_280_p0;
wire   [24:0] tmp_6_fu_310_p3;
wire   [29:0] x_V_fu_315_p3;
wire   [24:0] tmp_13_fu_327_p3;
wire   [29:0] y_V_fu_332_p3;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire   [30:0] z_s_V_fu_387_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage7;
wire   [1:0] tmp_11_fu_462_p2;
wire   [30:0] r_V_7_fu_485_p2;
wire   [30:0] ret_V_5_fu_500_p2;
wire   [30:0] ret_V_fu_515_p2;
wire   [0:0] tmp_12_fu_466_p2;
wire   [0:0] or_cond5_fu_472_p2;
reg   [23:0] ap_return_preg;
wire    ap_CS_fsm_state30;
reg   [28:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state15_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state16_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 24'd0;
end

generic_atan2_corIfE #(
    .DataWidth( 126 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
cordic_apfixed_circ_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cordic_apfixed_circ_address0),
    .ce0(cordic_apfixed_circ_ce0),
    .q0(cordic_apfixed_circ_q0)
);

comDescriptor_accJfO #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .OP( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 31 ))
comDescriptor_accJfO_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_p_Val2_5_phi_fu_108_p4),
    .din1(sh_assign_i_cast_fu_356_p1),
    .ce(1'b1),
    .dout(grp_fu_360_p2)
);

comDescriptor_accJfO #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .OP( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 31 ))
comDescriptor_accJfO_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_p_Val2_3_phi_fu_118_p4),
    .din1(sh_assign_i_cast_fu_356_p1),
    .ce(1'b1),
    .dout(grp_fu_366_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 24'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_return_preg <= UnifiedRetVal_reg_148;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        UnifiedRetVal_reg_148 <= tmp_16_reg_794;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        UnifiedRetVal_reg_148 <= {{z_V_3_reg_775[30:7]}};
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        UnifiedRetVal_reg_148 <= tmp_14_reg_799;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        UnifiedRetVal_reg_148 <= tmp_10_reg_804;
    end else if (((tmp_reg_536 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (tmp_9_fu_267_p2 == 1'd1) & (or_cond3_reg_615 == 1'd0))) begin
        UnifiedRetVal_reg_148 <= 24'd1647099;
    end else if (((1'b1 == ap_CS_fsm_state7) & (or_cond3_reg_615 == 1'd1))) begin
        UnifiedRetVal_reg_148 <= 24'd13483017;
    end else if (((1'b1 == ap_CS_fsm_state6) & (or_cond2_reg_605 == 1'd1))) begin
        UnifiedRetVal_reg_148 <= 24'd3294198;
    end else if (((1'b1 == ap_CS_fsm_state5) & (or_cond1_reg_596 == 1'd1))) begin
        UnifiedRetVal_reg_148 <= 24'd6588397;
    end else if (((or_cond_reg_586 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_reg_148 <= 24'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        UnifiedRetVal_reg_148 <= p_s_reg_642;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_678 == 1'd0))) begin
        p_Val2_2_reg_125 <= tz_V_reg_719;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_2_reg_125 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_678 == 1'd0))) begin
        p_Val2_3_reg_115 <= ty_V_fu_436_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_3_reg_115 <= y_V_cast_fu_340_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_678 == 1'd0))) begin
        p_Val2_5_reg_105 <= tx_V_fu_441_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_5_reg_105 <= x_V_cast_fu_323_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_678 == 1'd0))) begin
        ush_reg_137 <= n_reg_682;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ush_reg_137 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_reg_678 <= exitcond_i_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_9_fu_267_p2 == 1'd0) & (or_cond3_reg_615 == 1'd0))) begin
        in1abs_V_2_reg_622 <= in1abs_V_2_fu_271_p1;
        in2abs_V_2_reg_632 <= in2abs_V_2_fu_280_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in1abs_V_reg_647 <= in1abs_V_fu_296_p3;
        in2abs_V_reg_654 <= in2abs_V_fu_301_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        n_reg_682 <= n_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_586 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        or_cond1_reg_596 <= or_cond1_fu_242_p2;
        tmp_5_reg_590 <= tmp_5_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (or_cond1_reg_596 == 1'd0))) begin
        or_cond2_reg_605 <= or_cond2_fu_252_p2;
        tmp_7_reg_600 <= tmp_7_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (or_cond2_reg_605 == 1'd0))) begin
        or_cond3_reg_615 <= or_cond3_fu_262_p2;
        tmp_8_reg_609 <= tmp_8_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        or_cond4_reg_771 <= or_cond4_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        or_cond_reg_586 <= or_cond_fu_232_p2;
        signin2_V_reg_573 <= signin2_V_fu_220_p3;
        tmp_3_reg_580 <= tmp_3_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (tmp_41_reg_713 == 1'd0) & (exitcond_i_reg_678 == 1'd0))) begin
        p_1_i_reg_741 <= p_1_i_fu_421_p2;
        p_i_reg_736 <= p_i_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_i_reg_678 == 1'd0))) begin
        p_2_i_reg_703 <= p_2_i_fu_390_p2;
        p_5_i_reg_708 <= p_5_i_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (tmp_41_reg_713 == 1'd1) & (exitcond_i_reg_678 == 1'd0))) begin
        p_3_i_reg_746 <= p_3_i_fu_426_p2;
        p_4_i_reg_751 <= p_4_i_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_536 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (tmp_9_fu_267_p2 == 1'd1) & (or_cond3_reg_615 == 1'd0))) begin
        p_s_reg_642[3 : 1] <= p_s_fu_289_p3[3 : 1];
p_s_reg_642[9] <= p_s_fu_289_p3[9];
p_s_reg_642[12 : 11] <= p_s_fu_289_p3[12 : 11];
p_s_reg_642[15] <= p_s_fu_289_p3[15];
p_s_reg_642[18] <= p_s_fu_289_p3[18];
p_s_reg_642[21 : 20] <= p_s_fu_289_p3[21 : 20];
p_s_reg_642[23] <= p_s_fu_289_p3[23];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_9_fu_267_p2 == 1'd0) & (or_cond3_reg_615 == 1'd0) & (tmp_5_reg_590 == 1'd1))) begin
        r_V_4_reg_637 <= r_V_4_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_i_reg_678 == 1'd0))) begin
        r_V_5_reg_724 <= grp_fu_360_p2;
        r_V_6_reg_730 <= grp_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_8_reg_609 == 1'd1) & (tmp_9_fu_267_p2 == 1'd0) & (or_cond3_reg_615 == 1'd0))) begin
        r_V_reg_627 <= r_V_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        signin1_V_reg_554 <= signin1_V_fu_198_p3;
        tmp_1_reg_561 <= tmp_1_fu_205_p2;
        tmp_2_reg_568 <= tmp_2_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_10_reg_804 <= {{ret_V_fu_515_p2[30:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_14_reg_799 <= {{ret_V_5_fu_500_p2[30:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_i_reg_678 == 1'd0))) begin
        tmp_15_reg_698 <= {{cordic_apfixed_circ_q0[125:98]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_16_reg_794 <= {{r_V_7_fu_485_p2[30:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_i_reg_678 == 1'd0))) begin
        tmp_41_reg_713 <= p_Val2_3_reg_115[32'd30];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_4_reg_661 <= tmp_4_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_536 <= tmp_fu_183_p2;
        tmp_s_reg_543 <= tmp_s_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_reg_678 == 1'd0))) begin
        tz_V_reg_719 <= tz_V_fu_410_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        z_V_3_reg_775 <= z_V_3_fu_456_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (tmp_4_reg_661 == 1'd1))) begin
        z_V_reg_766 <= z_V_fu_446_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_344_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_678 == 1'd0))) begin
        ap_phi_mux_p_Val2_3_phi_fu_118_p4 = ty_V_fu_436_p3;
    end else begin
        ap_phi_mux_p_Val2_3_phi_fu_118_p4 = p_Val2_3_reg_115;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_678 == 1'd0))) begin
        ap_phi_mux_p_Val2_5_phi_fu_108_p4 = tx_V_fu_441_p3;
    end else begin
        ap_phi_mux_p_Val2_5_phi_fu_108_p4 = p_Val2_5_reg_105;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_678 == 1'd0))) begin
        ap_phi_mux_ush_phi_fu_141_p4 = n_reg_682;
    end else begin
        ap_phi_mux_ush_phi_fu_141_p4 = ush_reg_137;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_return = UnifiedRetVal_reg_148;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cordic_apfixed_circ_ce0 = 1'b1;
    end else begin
        cordic_apfixed_circ_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((or_cond_reg_586 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (or_cond1_reg_596 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (or_cond2_reg_605 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_reg_536 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (tmp_9_fu_267_p2 == 1'd1) & (or_cond3_reg_615 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_9_fu_267_p2 == 1'd0) & (or_cond3_reg_615 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_fu_344_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_fu_344_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (or_cond5_fu_472_p2 == 1'd1) & (tmp_12_fu_466_p2 == 1'd0) & (or_cond4_reg_771 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b1 == ap_CS_fsm_state21) & (or_cond5_fu_472_p2 == 1'd0) & (tmp_12_fu_466_p2 == 1'd0) & (or_cond4_reg_771 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if (((1'b1 == ap_CS_fsm_state21) & (tmp_12_fu_466_p2 == 1'd1) & (or_cond4_reg_771 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cordic_apfixed_circ_address0 = tmp_68_i_fu_372_p1;

assign exitcond_i_fu_344_p2 = ((ap_phi_mux_ush_phi_fu_141_p4 == 5'd31) ? 1'b1 : 1'b0);

assign in1abs_V_2_fu_271_p0 = in1_V;

assign in1abs_V_2_fu_271_p1 = in1abs_V_2_fu_271_p0;

assign in1abs_V_fu_296_p3 = ((tmp_8_reg_609[0:0] === 1'b1) ? r_V_reg_627 : in1abs_V_2_reg_622);

assign in2abs_V_2_fu_280_p0 = in2_V;

assign in2abs_V_2_fu_280_p1 = in2abs_V_2_fu_280_p0;

assign in2abs_V_fu_301_p3 = ((tmp_5_reg_590[0:0] === 1'b1) ? r_V_4_reg_637 : in2abs_V_2_reg_632);

assign n_fu_350_p2 = (ap_phi_mux_ush_phi_fu_141_p4 + 5'd1);

assign or_cond1_fu_242_p2 = (tmp_5_fu_237_p2 & tmp_3_reg_580);

assign or_cond2_fu_252_p2 = (tmp_reg_536 & tmp_7_fu_247_p2);

assign or_cond3_fu_262_p2 = (tmp_8_fu_257_p2 & tmp_7_reg_600);

assign or_cond4_fu_452_p2 = (tmp_reg_536 & tmp_5_reg_590);

assign or_cond5_fu_472_p2 = (tmp_8_reg_609 & tmp_1_reg_561);

assign or_cond_fu_232_p2 = (tmp_3_fu_227_p2 & tmp_1_reg_561);

assign p_1_i_fu_421_p2 = (p_Val2_3_reg_115 - r_V_5_reg_724);

assign p_2_i_fu_390_p2 = (p_Val2_2_reg_125 + z_s_V_fu_387_p1);

assign p_3_i_fu_426_p2 = (p_Val2_5_reg_105 - r_V_6_reg_730);

assign p_4_i_fu_431_p2 = (r_V_5_reg_724 + p_Val2_3_reg_115);

assign p_5_i_fu_396_p2 = (p_Val2_2_reg_125 - z_s_V_fu_387_p1);

assign p_i_fu_416_p2 = (p_Val2_5_reg_105 + r_V_6_reg_730);

assign p_s_fu_289_p3 = ((tmp_3_reg_580[0:0] === 1'b1) ? 24'd0 : 24'd11835918);

assign phitmp1_fu_217_p1 = tmp_2_reg_568;

assign phitmp_fu_195_p1 = tmp_s_reg_543;

assign r_V_4_fu_283_p2 = ($signed(25'd0) - $signed(in2abs_V_2_fu_280_p1));

assign r_V_7_fu_485_p2 = (31'd0 - z_V_3_reg_775);

assign r_V_fu_274_p2 = ($signed(25'd0) - $signed(in1abs_V_2_fu_271_p1));

assign ret_V_5_fu_500_p2 = ($signed(z_V_3_reg_775) + $signed(31'd1304168832));

assign ret_V_fu_515_p2 = (31'd843314816 - z_V_3_reg_775);

assign sh_assign_i_cast_fu_356_p1 = ap_phi_mux_ush_phi_fu_141_p4;

assign signin1_V_fu_198_p3 = ((tmp_reg_536[0:0] === 1'b1) ? 2'd2 : phitmp_fu_195_p1);

assign signin2_V_fu_220_p3 = ((tmp_1_reg_561[0:0] === 1'b1) ? 2'd2 : phitmp1_fu_217_p1);

assign tmp_11_fu_462_p2 = (signin2_V_reg_573 | signin1_V_reg_554);

assign tmp_12_fu_466_p2 = ((tmp_11_fu_462_p2 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_13_fu_327_p3 = ((tmp_4_reg_661[0:0] === 1'b1) ? in2abs_V_reg_654 : in1abs_V_reg_647);

assign tmp_1_fu_205_p0 = in2_V;

assign tmp_1_fu_205_p2 = (($signed(tmp_1_fu_205_p0) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign tmp_2_fu_211_p0 = in2_V;

assign tmp_2_fu_211_p2 = ((tmp_2_fu_211_p0 == 24'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_227_p2 = ((signin1_V_reg_554 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_41_fu_402_p3 = p_Val2_3_reg_115[32'd30];

assign tmp_4_fu_306_p2 = (($signed(in1abs_V_reg_647) > $signed(in2abs_V_reg_654)) ? 1'b1 : 1'b0);

assign tmp_5_fu_237_p2 = ((signin2_V_reg_573 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_68_i_fu_372_p1 = ap_phi_mux_ush_phi_fu_141_p4;

assign tmp_6_fu_310_p3 = ((tmp_4_reg_661[0:0] === 1'b1) ? in1abs_V_reg_647 : in2abs_V_reg_654);

assign tmp_7_fu_247_p2 = ((signin2_V_reg_573 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_8_fu_257_p2 = ((signin1_V_reg_554 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_267_p0 = in1_V;

assign tmp_9_fu_267_p1 = in2_V;

assign tmp_9_fu_267_p2 = ((tmp_9_fu_267_p0 == tmp_9_fu_267_p1) ? 1'b1 : 1'b0);

assign tmp_fu_183_p0 = in1_V;

assign tmp_fu_183_p2 = (($signed(tmp_fu_183_p0) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_189_p0 = in1_V;

assign tmp_s_fu_189_p2 = ((tmp_s_fu_189_p0 == 24'd0) ? 1'b1 : 1'b0);

assign tx_V_fu_441_p3 = ((tmp_41_reg_713[0:0] === 1'b1) ? p_3_i_reg_746 : p_i_reg_736);

assign ty_V_fu_436_p3 = ((tmp_41_reg_713[0:0] === 1'b1) ? p_4_i_reg_751 : p_1_i_reg_741);

assign tz_V_fu_410_p3 = ((tmp_41_fu_402_p3[0:0] === 1'b1) ? p_5_i_reg_708 : p_2_i_reg_703);

assign x_V_cast_fu_323_p1 = $signed(x_V_fu_315_p3);

assign x_V_fu_315_p3 = {{tmp_6_fu_310_p3}, {5'd0}};

assign y_V_cast_fu_340_p1 = $signed(y_V_fu_332_p3);

assign y_V_fu_332_p3 = {{tmp_13_fu_327_p3}, {5'd0}};

assign z_V_3_fu_456_p3 = ((tmp_4_reg_661[0:0] === 1'b1) ? z_V_reg_766 : p_Val2_2_reg_125);

assign z_V_fu_446_p2 = (31'd421657408 - p_Val2_2_reg_125);

assign z_s_V_fu_387_p1 = tmp_15_reg_698;

always @ (posedge ap_clk) begin
    p_s_reg_642[0] <= 1'b0;
    p_s_reg_642[8:4] <= 5'b00000;
    p_s_reg_642[10:10] <= 1'b0;
    p_s_reg_642[14:13] <= 2'b00;
    p_s_reg_642[17:16] <= 2'b00;
    p_s_reg_642[19:19] <= 1'b0;
    p_s_reg_642[22] <= 1'b0;
end

endmodule //generic_atan2
