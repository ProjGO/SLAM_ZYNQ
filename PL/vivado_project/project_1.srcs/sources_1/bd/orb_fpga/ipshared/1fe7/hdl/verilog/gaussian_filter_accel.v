// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gaussian_filter_accel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.170000,HLS_SYN_LAT=333132,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=18,HLS_SYN_FF=6419,HLS_SYN_LUT=5880,HLS_VERSION=2018_3}" *)

module gaussian_filter_accel (
        ap_clk,
        ap_rst_n,
        GausInStream_V_V_TDATA,
        GausInStream_V_V_TVALID,
        GausInStream_V_V_TREADY,
        OutStream_V_V_TDATA,
        OutStream_V_V_TVALID,
        OutStream_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [7:0] GausInStream_V_V_TDATA;
input   GausInStream_V_V_TVALID;
output   GausInStream_V_V_TREADY;
output  [7:0] OutStream_V_V_TDATA;
output   OutStream_V_V_TVALID;
input   OutStream_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [7:0] GausInStream_V_V_0_data_out;
wire    GausInStream_V_V_0_vld_in;
wire    GausInStream_V_V_0_vld_out;
wire    GausInStream_V_V_0_ack_in;
reg    GausInStream_V_V_0_ack_out;
reg   [7:0] GausInStream_V_V_0_payload_A;
reg   [7:0] GausInStream_V_V_0_payload_B;
reg    GausInStream_V_V_0_sel_rd;
reg    GausInStream_V_V_0_sel_wr;
wire    GausInStream_V_V_0_sel;
wire    GausInStream_V_V_0_load_A;
wire    GausInStream_V_V_0_load_B;
reg   [1:0] GausInStream_V_V_0_state;
wire    GausInStream_V_V_0_state_cmp_full;
reg   [7:0] OutStream_V_V_1_data_out;
wire    OutStream_V_V_1_vld_in;
wire    OutStream_V_V_1_vld_out;
wire    OutStream_V_V_1_ack_in;
wire    OutStream_V_V_1_ack_out;
reg   [7:0] OutStream_V_V_1_payload_A;
reg   [7:0] OutStream_V_V_1_payload_B;
reg    OutStream_V_V_1_sel_rd;
reg    OutStream_V_V_1_sel_wr;
wire    OutStream_V_V_1_sel;
wire    OutStream_V_V_1_load_A;
wire    OutStream_V_V_1_load_B;
reg   [1:0] OutStream_V_V_1_state;
wire    OutStream_V_V_1_state_cmp_full;
wire    grp_myGaussianBlur_fu_26_ap_start;
wire    grp_myGaussianBlur_fu_26_ap_done;
wire    grp_myGaussianBlur_fu_26_ap_idle;
wire    grp_myGaussianBlur_fu_26_ap_ready;
wire    grp_myGaussianBlur_fu_26_InStream_V_V_TVALID;
wire    grp_myGaussianBlur_fu_26_InStream_V_V_TREADY;
wire   [7:0] grp_myGaussianBlur_fu_26_OutStream_V_V_TDATA;
wire    grp_myGaussianBlur_fu_26_OutStream_V_V_TVALID;
wire    grp_myGaussianBlur_fu_26_OutStream_V_V_TREADY;
reg    grp_myGaussianBlur_fu_26_ap_start_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [3:0] ap_NS_fsm;
wire    ap_CS_fsm_state4;

// power-on initialization
initial begin
#0 GausInStream_V_V_0_sel_rd = 1'b0;
#0 GausInStream_V_V_0_sel_wr = 1'b0;
#0 GausInStream_V_V_0_state = 2'd0;
#0 OutStream_V_V_1_sel_rd = 1'b0;
#0 OutStream_V_V_1_sel_wr = 1'b0;
#0 OutStream_V_V_1_state = 2'd0;
#0 grp_myGaussianBlur_fu_26_ap_start_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

myGaussianBlur grp_myGaussianBlur_fu_26(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_myGaussianBlur_fu_26_ap_start),
    .ap_done(grp_myGaussianBlur_fu_26_ap_done),
    .ap_idle(grp_myGaussianBlur_fu_26_ap_idle),
    .ap_ready(grp_myGaussianBlur_fu_26_ap_ready),
    .InStream_V_V_TDATA(GausInStream_V_V_0_data_out),
    .InStream_V_V_TVALID(grp_myGaussianBlur_fu_26_InStream_V_V_TVALID),
    .InStream_V_V_TREADY(grp_myGaussianBlur_fu_26_InStream_V_V_TREADY),
    .OutStream_V_V_TDATA(grp_myGaussianBlur_fu_26_OutStream_V_V_TDATA),
    .OutStream_V_V_TVALID(grp_myGaussianBlur_fu_26_OutStream_V_V_TVALID),
    .OutStream_V_V_TREADY(grp_myGaussianBlur_fu_26_OutStream_V_V_TREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        GausInStream_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == GausInStream_V_V_0_ack_out) & (1'b1 == GausInStream_V_V_0_vld_out))) begin
            GausInStream_V_V_0_sel_rd <= ~GausInStream_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        GausInStream_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == GausInStream_V_V_0_ack_in) & (1'b1 == GausInStream_V_V_0_vld_in))) begin
            GausInStream_V_V_0_sel_wr <= ~GausInStream_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        GausInStream_V_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == GausInStream_V_V_0_vld_in) & (2'd2 == GausInStream_V_V_0_state)) | ((1'b0 == GausInStream_V_V_0_vld_in) & (2'd3 == GausInStream_V_V_0_state) & (1'b1 == GausInStream_V_V_0_ack_out)))) begin
            GausInStream_V_V_0_state <= 2'd2;
        end else if ((((1'b0 == GausInStream_V_V_0_ack_out) & (2'd1 == GausInStream_V_V_0_state)) | ((1'b0 == GausInStream_V_V_0_ack_out) & (2'd3 == GausInStream_V_V_0_state) & (1'b1 == GausInStream_V_V_0_vld_in)))) begin
            GausInStream_V_V_0_state <= 2'd1;
        end else if (((~((1'b0 == GausInStream_V_V_0_vld_in) & (1'b1 == GausInStream_V_V_0_ack_out)) & ~((1'b0 == GausInStream_V_V_0_ack_out) & (1'b1 == GausInStream_V_V_0_vld_in)) & (2'd3 == GausInStream_V_V_0_state)) | ((2'd1 == GausInStream_V_V_0_state) & (1'b1 == GausInStream_V_V_0_ack_out)) | ((2'd2 == GausInStream_V_V_0_state) & (1'b1 == GausInStream_V_V_0_vld_in)))) begin
            GausInStream_V_V_0_state <= 2'd3;
        end else begin
            GausInStream_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OutStream_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OutStream_V_V_1_ack_out) & (1'b1 == OutStream_V_V_1_vld_out))) begin
            OutStream_V_V_1_sel_rd <= ~OutStream_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OutStream_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OutStream_V_V_1_ack_in) & (1'b1 == OutStream_V_V_1_vld_in))) begin
            OutStream_V_V_1_sel_wr <= ~OutStream_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OutStream_V_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OutStream_V_V_1_state) & (1'b0 == OutStream_V_V_1_vld_in)) | ((2'd3 == OutStream_V_V_1_state) & (1'b0 == OutStream_V_V_1_vld_in) & (1'b1 == OutStream_V_V_1_ack_out)))) begin
            OutStream_V_V_1_state <= 2'd2;
        end else if ((((2'd1 == OutStream_V_V_1_state) & (1'b0 == OutStream_V_V_1_ack_out)) | ((2'd3 == OutStream_V_V_1_state) & (1'b0 == OutStream_V_V_1_ack_out) & (1'b1 == OutStream_V_V_1_vld_in)))) begin
            OutStream_V_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OutStream_V_V_1_vld_in) & (1'b1 == OutStream_V_V_1_ack_out)) & ~((1'b0 == OutStream_V_V_1_ack_out) & (1'b1 == OutStream_V_V_1_vld_in)) & (2'd3 == OutStream_V_V_1_state)) | ((2'd1 == OutStream_V_V_1_state) & (1'b1 == OutStream_V_V_1_ack_out)) | ((2'd2 == OutStream_V_V_1_state) & (1'b1 == OutStream_V_V_1_vld_in)))) begin
            OutStream_V_V_1_state <= 2'd3;
        end else begin
            OutStream_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myGaussianBlur_fu_26_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_myGaussianBlur_fu_26_ap_start_reg <= 1'b1;
        end else if ((grp_myGaussianBlur_fu_26_ap_ready == 1'b1)) begin
            grp_myGaussianBlur_fu_26_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == GausInStream_V_V_0_load_A)) begin
        GausInStream_V_V_0_payload_A <= GausInStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == GausInStream_V_V_0_load_B)) begin
        GausInStream_V_V_0_payload_B <= GausInStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutStream_V_V_1_load_A)) begin
        OutStream_V_V_1_payload_A <= grp_myGaussianBlur_fu_26_OutStream_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OutStream_V_V_1_load_B)) begin
        OutStream_V_V_1_payload_B <= grp_myGaussianBlur_fu_26_OutStream_V_V_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GausInStream_V_V_0_ack_out = grp_myGaussianBlur_fu_26_InStream_V_V_TREADY;
    end else begin
        GausInStream_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == GausInStream_V_V_0_sel)) begin
        GausInStream_V_V_0_data_out = GausInStream_V_V_0_payload_B;
    end else begin
        GausInStream_V_V_0_data_out = GausInStream_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == OutStream_V_V_1_sel)) begin
        OutStream_V_V_1_data_out = OutStream_V_V_1_payload_B;
    end else begin
        OutStream_V_V_1_data_out = OutStream_V_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_myGaussianBlur_fu_26_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == OutStream_V_V_1_ack_in) & (OutStream_V_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GausInStream_V_V_0_ack_in = GausInStream_V_V_0_state[1'd1];

assign GausInStream_V_V_0_load_A = (~GausInStream_V_V_0_sel_wr & GausInStream_V_V_0_state_cmp_full);

assign GausInStream_V_V_0_load_B = (GausInStream_V_V_0_state_cmp_full & GausInStream_V_V_0_sel_wr);

assign GausInStream_V_V_0_sel = GausInStream_V_V_0_sel_rd;

assign GausInStream_V_V_0_state_cmp_full = ((GausInStream_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign GausInStream_V_V_0_vld_in = GausInStream_V_V_TVALID;

assign GausInStream_V_V_0_vld_out = GausInStream_V_V_0_state[1'd0];

assign GausInStream_V_V_TREADY = GausInStream_V_V_0_state[1'd1];

assign OutStream_V_V_1_ack_in = OutStream_V_V_1_state[1'd1];

assign OutStream_V_V_1_ack_out = OutStream_V_V_TREADY;

assign OutStream_V_V_1_load_A = (~OutStream_V_V_1_sel_wr & OutStream_V_V_1_state_cmp_full);

assign OutStream_V_V_1_load_B = (OutStream_V_V_1_state_cmp_full & OutStream_V_V_1_sel_wr);

assign OutStream_V_V_1_sel = OutStream_V_V_1_sel_rd;

assign OutStream_V_V_1_state_cmp_full = ((OutStream_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OutStream_V_V_1_vld_in = grp_myGaussianBlur_fu_26_OutStream_V_V_TVALID;

assign OutStream_V_V_1_vld_out = OutStream_V_V_1_state[1'd0];

assign OutStream_V_V_TDATA = OutStream_V_V_1_data_out;

assign OutStream_V_V_TVALID = OutStream_V_V_1_state[1'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_myGaussianBlur_fu_26_InStream_V_V_TVALID = GausInStream_V_V_0_state[1'd0];

assign grp_myGaussianBlur_fu_26_OutStream_V_V_TREADY = (ap_CS_fsm_state3 & OutStream_V_V_1_ack_in);

assign grp_myGaussianBlur_fu_26_ap_start = grp_myGaussianBlur_fu_26_ap_start_reg;

endmodule //gaussian_filter_accel
