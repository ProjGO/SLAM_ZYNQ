// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myGaussianBlur (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        InStream_V_V_TDATA,
        InStream_V_V_TVALID,
        InStream_V_V_TREADY,
        OutStream_V_V_TDATA,
        OutStream_V_V_TVALID,
        OutStream_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] InStream_V_V_TDATA;
input   InStream_V_V_TVALID;
output   InStream_V_V_TREADY;
output  [7:0] OutStream_V_V_TDATA;
output   OutStream_V_V_TVALID;
input   OutStream_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg InStream_V_V_TREADY;
reg[7:0] OutStream_V_V_TDATA;
reg OutStream_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    InStream_V_V_TDATA_blk_n;
reg    OutStream_V_V_TDATA_blk_n;
wire   [15:0] tmp_fu_66_p6;
reg   [15:0] tmp_reg_94;
reg    ap_block_state1;
wire   [15:0] tmp_s_fu_80_p6;
reg   [15:0] tmp_s_reg_99;
wire    grp_xFGaussianFilter7x7_fu_52_ap_start;
wire    grp_xFGaussianFilter7x7_fu_52_ap_done;
wire    grp_xFGaussianFilter7x7_fu_52_ap_idle;
wire    grp_xFGaussianFilter7x7_fu_52_ap_ready;
wire    grp_xFGaussianFilter7x7_fu_52_InStream_V_V_TREADY;
wire   [7:0] grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TDATA;
wire    grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TVALID;
wire    grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TREADY;
reg    grp_xFGaussianFilter7x7_fu_52_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [1:0] tmp_35_fu_62_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_xFGaussianFilter7x7_fu_52_ap_start_reg = 1'b0;
end

xFGaussianFilter7x7 grp_xFGaussianFilter7x7_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFGaussianFilter7x7_fu_52_ap_start),
    .ap_done(grp_xFGaussianFilter7x7_fu_52_ap_done),
    .ap_idle(grp_xFGaussianFilter7x7_fu_52_ap_idle),
    .ap_ready(grp_xFGaussianFilter7x7_fu_52_ap_ready),
    .InStream_V_V_TDATA(InStream_V_V_TDATA),
    .InStream_V_V_TVALID(InStream_V_V_TVALID),
    .InStream_V_V_TREADY(grp_xFGaussianFilter7x7_fu_52_InStream_V_V_TREADY),
    .OutStream_V_V_TDATA(grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TDATA),
    .OutStream_V_V_TVALID(grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TVALID),
    .OutStream_V_V_TREADY(grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TREADY),
    .img_height(tmp_reg_94),
    .img_width(tmp_s_reg_99)
);

gaussian_filter_aocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
gaussian_filter_aocq_U77(
    .din0(16'd480),
    .din1(16'd320),
    .din2(16'd213),
    .din3(16'd142),
    .din4(tmp_35_fu_62_p1),
    .dout(tmp_fu_66_p6)
);

gaussian_filter_aocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
gaussian_filter_aocq_U78(
    .din0(16'd640),
    .din1(16'd427),
    .din2(16'd284),
    .din3(16'd190),
    .din4(tmp_35_fu_62_p1),
    .dout(tmp_s_fu_80_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFGaussianFilter7x7_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_xFGaussianFilter7x7_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_xFGaussianFilter7x7_fu_52_ap_ready == 1'b1)) begin
            grp_xFGaussianFilter7x7_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == OutStream_V_V_TREADY) | (1'b0 == InStream_V_V_TVALID)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_94 <= tmp_fu_66_p6;
        tmp_s_reg_99 <= tmp_s_fu_80_p6;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        InStream_V_V_TDATA_blk_n = InStream_V_V_TVALID;
    end else begin
        InStream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == OutStream_V_V_TREADY) | (1'b0 == InStream_V_V_TVALID)) & (1'b1 == ap_CS_fsm_state1))) begin
        InStream_V_V_TREADY = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        InStream_V_V_TREADY = grp_xFGaussianFilter7x7_fu_52_InStream_V_V_TREADY;
    end else begin
        InStream_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == InStream_V_V_TVALID)) & (1'b1 == ap_CS_fsm_state1))) begin
        OutStream_V_V_TDATA = InStream_V_V_TDATA;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TVALID == 1'b1))) begin
        OutStream_V_V_TDATA = grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TDATA;
    end else begin
        OutStream_V_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        OutStream_V_V_TDATA_blk_n = OutStream_V_V_TREADY;
    end else begin
        OutStream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == OutStream_V_V_TREADY) | (1'b0 == InStream_V_V_TVALID)) & (1'b1 == ap_CS_fsm_state1))) begin
        OutStream_V_V_TVALID = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        OutStream_V_V_TVALID = grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TVALID;
    end else begin
        OutStream_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_xFGaussianFilter7x7_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFGaussianFilter7x7_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == OutStream_V_V_TREADY) | (1'b0 == InStream_V_V_TVALID)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_xFGaussianFilter7x7_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == InStream_V_V_TVALID));
end

assign grp_xFGaussianFilter7x7_fu_52_OutStream_V_V_TREADY = (ap_CS_fsm_state3 & OutStream_V_V_TREADY);

assign grp_xFGaussianFilter7x7_fu_52_ap_start = grp_xFGaussianFilter7x7_fu_52_ap_start_reg;

assign tmp_35_fu_62_p1 = InStream_V_V_TDATA[1:0];

endmodule //myGaussianBlur
