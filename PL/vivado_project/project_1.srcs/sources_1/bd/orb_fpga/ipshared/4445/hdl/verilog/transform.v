// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="transform,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.612000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=16,HLS_SYN_FF=8159,HLS_SYN_LUT=7835,HLS_VERSION=2018_3}" *)

module transform (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        out_stream_V_V_TDATA,
        out_stream_V_V_TVALID,
        out_stream_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input  [7:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [0:0] in_stream_TKEEP;
input  [0:0] in_stream_TSTRB;
input  [0:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [0:0] in_stream_TID;
input  [0:0] in_stream_TDEST;
output  [7:0] out_stream_V_V_TDATA;
output   out_stream_V_V_TVALID;
input   out_stream_V_V_TREADY;

 reg    ap_rst_n_inv;
reg   [7:0] in_stream_V_data_V_0_data_out;
wire    in_stream_V_data_V_0_vld_in;
wire    in_stream_V_data_V_0_vld_out;
wire    in_stream_V_data_V_0_ack_in;
reg    in_stream_V_data_V_0_ack_out;
reg   [7:0] in_stream_V_data_V_0_payload_A;
reg   [7:0] in_stream_V_data_V_0_payload_B;
reg    in_stream_V_data_V_0_sel_rd;
reg    in_stream_V_data_V_0_sel_wr;
wire    in_stream_V_data_V_0_sel;
wire    in_stream_V_data_V_0_load_A;
wire    in_stream_V_data_V_0_load_B;
reg   [1:0] in_stream_V_data_V_0_state;
wire    in_stream_V_data_V_0_state_cmp_full;
reg   [0:0] in_stream_V_keep_V_0_data_out;
wire    in_stream_V_keep_V_0_vld_in;
wire    in_stream_V_keep_V_0_vld_out;
wire    in_stream_V_keep_V_0_ack_in;
reg    in_stream_V_keep_V_0_ack_out;
reg   [0:0] in_stream_V_keep_V_0_payload_A;
reg   [0:0] in_stream_V_keep_V_0_payload_B;
reg    in_stream_V_keep_V_0_sel_rd;
reg    in_stream_V_keep_V_0_sel_wr;
wire    in_stream_V_keep_V_0_sel;
wire    in_stream_V_keep_V_0_load_A;
wire    in_stream_V_keep_V_0_load_B;
reg   [1:0] in_stream_V_keep_V_0_state;
wire    in_stream_V_keep_V_0_state_cmp_full;
reg   [0:0] in_stream_V_strb_V_0_data_out;
wire    in_stream_V_strb_V_0_vld_in;
wire    in_stream_V_strb_V_0_vld_out;
wire    in_stream_V_strb_V_0_ack_in;
reg    in_stream_V_strb_V_0_ack_out;
reg   [0:0] in_stream_V_strb_V_0_payload_A;
reg   [0:0] in_stream_V_strb_V_0_payload_B;
reg    in_stream_V_strb_V_0_sel_rd;
reg    in_stream_V_strb_V_0_sel_wr;
wire    in_stream_V_strb_V_0_sel;
wire    in_stream_V_strb_V_0_load_A;
wire    in_stream_V_strb_V_0_load_B;
reg   [1:0] in_stream_V_strb_V_0_state;
wire    in_stream_V_strb_V_0_state_cmp_full;
reg   [0:0] in_stream_V_user_V_0_data_out;
wire    in_stream_V_user_V_0_vld_in;
wire    in_stream_V_user_V_0_vld_out;
wire    in_stream_V_user_V_0_ack_in;
reg    in_stream_V_user_V_0_ack_out;
reg   [0:0] in_stream_V_user_V_0_payload_A;
reg   [0:0] in_stream_V_user_V_0_payload_B;
reg    in_stream_V_user_V_0_sel_rd;
reg    in_stream_V_user_V_0_sel_wr;
wire    in_stream_V_user_V_0_sel;
wire    in_stream_V_user_V_0_load_A;
wire    in_stream_V_user_V_0_load_B;
reg   [1:0] in_stream_V_user_V_0_state;
wire    in_stream_V_user_V_0_state_cmp_full;
reg   [0:0] in_stream_V_last_V_0_data_out;
wire    in_stream_V_last_V_0_vld_in;
wire    in_stream_V_last_V_0_vld_out;
wire    in_stream_V_last_V_0_ack_in;
reg    in_stream_V_last_V_0_ack_out;
reg   [0:0] in_stream_V_last_V_0_payload_A;
reg   [0:0] in_stream_V_last_V_0_payload_B;
reg    in_stream_V_last_V_0_sel_rd;
reg    in_stream_V_last_V_0_sel_wr;
wire    in_stream_V_last_V_0_sel;
wire    in_stream_V_last_V_0_load_A;
wire    in_stream_V_last_V_0_load_B;
reg   [1:0] in_stream_V_last_V_0_state;
wire    in_stream_V_last_V_0_state_cmp_full;
reg   [0:0] in_stream_V_id_V_0_data_out;
wire    in_stream_V_id_V_0_vld_in;
wire    in_stream_V_id_V_0_vld_out;
wire    in_stream_V_id_V_0_ack_in;
reg    in_stream_V_id_V_0_ack_out;
reg   [0:0] in_stream_V_id_V_0_payload_A;
reg   [0:0] in_stream_V_id_V_0_payload_B;
reg    in_stream_V_id_V_0_sel_rd;
reg    in_stream_V_id_V_0_sel_wr;
wire    in_stream_V_id_V_0_sel;
wire    in_stream_V_id_V_0_load_A;
wire    in_stream_V_id_V_0_load_B;
reg   [1:0] in_stream_V_id_V_0_state;
wire    in_stream_V_id_V_0_state_cmp_full;
reg   [0:0] in_stream_V_dest_V_0_data_out;
wire    in_stream_V_dest_V_0_vld_in;
wire    in_stream_V_dest_V_0_vld_out;
wire    in_stream_V_dest_V_0_ack_in;
reg    in_stream_V_dest_V_0_ack_out;
reg   [0:0] in_stream_V_dest_V_0_payload_A;
reg   [0:0] in_stream_V_dest_V_0_payload_B;
reg    in_stream_V_dest_V_0_sel_rd;
reg    in_stream_V_dest_V_0_sel_wr;
wire    in_stream_V_dest_V_0_sel;
wire    in_stream_V_dest_V_0_load_A;
wire    in_stream_V_dest_V_0_load_B;
reg   [1:0] in_stream_V_dest_V_0_state;
wire    in_stream_V_dest_V_0_state_cmp_full;
reg   [7:0] out_stream_V_V_1_data_in;
reg   [7:0] out_stream_V_V_1_data_out;
reg    out_stream_V_V_1_vld_in;
wire    out_stream_V_V_1_vld_out;
wire    out_stream_V_V_1_ack_in;
wire    out_stream_V_V_1_ack_out;
reg   [7:0] out_stream_V_V_1_payload_A;
reg   [7:0] out_stream_V_V_1_payload_B;
reg    out_stream_V_V_1_sel_rd;
reg    out_stream_V_V_1_sel_wr;
wire    out_stream_V_V_1_sel;
wire    out_stream_V_V_1_load_A;
wire    out_stream_V_V_1_load_B;
reg   [1:0] out_stream_V_V_1_state;
wire    out_stream_V_V_1_state_cmp_full;
reg    in_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_stream_V_V_TDATA_blk_n;
wire   [0:0] tmp_8_fu_126_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
reg   [7:0] tmp_data_V_reg_132;
reg    ap_block_state1_io;
wire   [7:0] grp_transform_level_fu_76_out_stream_V_V_TDATA;
wire    grp_transform_level_fu_76_ap_start;
wire    grp_transform_level_fu_76_in_stream_TVALID;
wire    grp_transform_level_fu_76_in_stream_TREADY;
wire    grp_transform_level_fu_76_out_stream_V_V_TVALID;
wire    grp_transform_level_fu_76_out_stream_V_V_TREADY;
wire    grp_transform_level_fu_76_ap_done;
wire    grp_transform_level_fu_76_ap_ready;
wire    grp_transform_level_fu_76_ap_idle;
reg    grp_transform_level_fu_76_ap_continue;
wire   [7:0] grp_transform_level_0_fu_101_out_stream_V_V_TDATA;
wire    grp_transform_level_0_fu_101_in_stream_TVALID;
wire    grp_transform_level_0_fu_101_in_stream_TREADY;
wire    grp_transform_level_0_fu_101_out_stream_V_V_TVALID;
wire    grp_transform_level_0_fu_101_out_stream_V_V_TREADY;
wire    grp_transform_level_0_fu_101_ap_start;
wire    grp_transform_level_0_fu_101_ap_done;
wire    grp_transform_level_0_fu_101_ap_ready;
wire    grp_transform_level_0_fu_101_ap_idle;
reg    grp_transform_level_0_fu_101_ap_continue;
reg    grp_transform_level_fu_76_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_transform_level_fu_76_ap_ready;
wire    ap_sync_grp_transform_level_fu_76_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_sync_reg_grp_transform_level_fu_76_ap_ready;
reg    ap_sync_reg_grp_transform_level_fu_76_ap_done;
reg    grp_transform_level_0_fu_101_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_sync_grp_transform_level_0_fu_101_ap_ready;
wire    ap_sync_grp_transform_level_0_fu_101_ap_done;
reg    ap_block_state7_on_subcall_done;
reg    ap_sync_reg_grp_transform_level_0_fu_101_ap_ready;
reg    ap_sync_reg_grp_transform_level_0_fu_101_ap_done;
reg   [7:0] ap_NS_fsm;
wire    ap_CS_fsm_state8;

// power-on initialization
initial begin
#0 in_stream_V_data_V_0_sel_rd = 1'b0;
#0 in_stream_V_data_V_0_sel_wr = 1'b0;
#0 in_stream_V_data_V_0_state = 2'd0;
#0 in_stream_V_keep_V_0_sel_rd = 1'b0;
#0 in_stream_V_keep_V_0_sel_wr = 1'b0;
#0 in_stream_V_keep_V_0_state = 2'd0;
#0 in_stream_V_strb_V_0_sel_rd = 1'b0;
#0 in_stream_V_strb_V_0_sel_wr = 1'b0;
#0 in_stream_V_strb_V_0_state = 2'd0;
#0 in_stream_V_user_V_0_sel_rd = 1'b0;
#0 in_stream_V_user_V_0_sel_wr = 1'b0;
#0 in_stream_V_user_V_0_state = 2'd0;
#0 in_stream_V_last_V_0_sel_rd = 1'b0;
#0 in_stream_V_last_V_0_sel_wr = 1'b0;
#0 in_stream_V_last_V_0_state = 2'd0;
#0 in_stream_V_id_V_0_sel_rd = 1'b0;
#0 in_stream_V_id_V_0_sel_wr = 1'b0;
#0 in_stream_V_id_V_0_state = 2'd0;
#0 in_stream_V_dest_V_0_sel_rd = 1'b0;
#0 in_stream_V_dest_V_0_sel_wr = 1'b0;
#0 in_stream_V_dest_V_0_state = 2'd0;
#0 out_stream_V_V_1_sel_rd = 1'b0;
#0 out_stream_V_V_1_sel_wr = 1'b0;
#0 out_stream_V_V_1_state = 2'd0;
#0 ap_CS_fsm = 8'd1;
#0 grp_transform_level_fu_76_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_transform_level_fu_76_ap_ready = 1'b0;
#0 ap_sync_reg_grp_transform_level_fu_76_ap_done = 1'b0;
#0 grp_transform_level_0_fu_101_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_transform_level_0_fu_101_ap_ready = 1'b0;
#0 ap_sync_reg_grp_transform_level_0_fu_101_ap_done = 1'b0;
end

transform_level grp_transform_level_fu_76(
    .in_stream_TDATA(in_stream_V_data_V_0_data_out),
    .in_stream_TKEEP(in_stream_V_keep_V_0_data_out),
    .in_stream_TSTRB(in_stream_V_strb_V_0_data_out),
    .in_stream_TUSER(in_stream_V_user_V_0_data_out),
    .in_stream_TLAST(in_stream_V_last_V_0_data_out),
    .in_stream_TID(in_stream_V_id_V_0_data_out),
    .in_stream_TDEST(in_stream_V_dest_V_0_data_out),
    .out_stream_V_V_TDATA(grp_transform_level_fu_76_out_stream_V_V_TDATA),
    .img_level_V(tmp_data_V_reg_132),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .img_level_V_ap_vld(1'b1),
    .ap_start(grp_transform_level_fu_76_ap_start),
    .in_stream_TVALID(grp_transform_level_fu_76_in_stream_TVALID),
    .in_stream_TREADY(grp_transform_level_fu_76_in_stream_TREADY),
    .out_stream_V_V_TVALID(grp_transform_level_fu_76_out_stream_V_V_TVALID),
    .out_stream_V_V_TREADY(grp_transform_level_fu_76_out_stream_V_V_TREADY),
    .ap_done(grp_transform_level_fu_76_ap_done),
    .ap_ready(grp_transform_level_fu_76_ap_ready),
    .ap_idle(grp_transform_level_fu_76_ap_idle),
    .ap_continue(grp_transform_level_fu_76_ap_continue)
);

transform_level_0 grp_transform_level_0_fu_101(
    .in_stream_TDATA(in_stream_V_data_V_0_data_out),
    .in_stream_TKEEP(in_stream_V_keep_V_0_data_out),
    .in_stream_TSTRB(in_stream_V_strb_V_0_data_out),
    .in_stream_TUSER(in_stream_V_user_V_0_data_out),
    .in_stream_TLAST(in_stream_V_last_V_0_data_out),
    .in_stream_TID(in_stream_V_id_V_0_data_out),
    .in_stream_TDEST(in_stream_V_dest_V_0_data_out),
    .out_stream_V_V_TDATA(grp_transform_level_0_fu_101_out_stream_V_V_TDATA),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .in_stream_TVALID(grp_transform_level_0_fu_101_in_stream_TVALID),
    .in_stream_TREADY(grp_transform_level_0_fu_101_in_stream_TREADY),
    .out_stream_V_V_TVALID(grp_transform_level_0_fu_101_out_stream_V_V_TVALID),
    .out_stream_V_V_TREADY(grp_transform_level_0_fu_101_out_stream_V_V_TREADY),
    .ap_start(grp_transform_level_0_fu_101_ap_start),
    .ap_done(grp_transform_level_0_fu_101_ap_done),
    .ap_ready(grp_transform_level_0_fu_101_ap_ready),
    .ap_idle(grp_transform_level_0_fu_101_ap_idle),
    .ap_continue(grp_transform_level_0_fu_101_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_transform_level_0_fu_101_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_sync_reg_grp_transform_level_0_fu_101_ap_done <= 1'b0;
        end else if ((grp_transform_level_0_fu_101_ap_done == 1'b1)) begin
            ap_sync_reg_grp_transform_level_0_fu_101_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_transform_level_0_fu_101_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_sync_reg_grp_transform_level_0_fu_101_ap_ready <= 1'b0;
        end else if ((grp_transform_level_0_fu_101_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_transform_level_0_fu_101_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_transform_level_fu_76_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_transform_level_fu_76_ap_done <= 1'b0;
        end else if ((grp_transform_level_fu_76_ap_done == 1'b1)) begin
            ap_sync_reg_grp_transform_level_fu_76_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_transform_level_fu_76_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_transform_level_fu_76_ap_ready <= 1'b0;
        end else if ((grp_transform_level_fu_76_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_transform_level_fu_76_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_transform_level_0_fu_101_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | ((ap_sync_grp_transform_level_0_fu_101_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state7)))) begin
            grp_transform_level_0_fu_101_ap_start_reg <= 1'b1;
        end else if ((grp_transform_level_0_fu_101_ap_ready == 1'b1)) begin
            grp_transform_level_0_fu_101_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_transform_level_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_transform_level_fu_76_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_transform_level_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_transform_level_fu_76_ap_ready == 1'b1)) begin
            grp_transform_level_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_data_V_0_ack_out == 1'b1) & (in_stream_V_data_V_0_vld_out == 1'b1))) begin
            in_stream_V_data_V_0_sel_rd <= ~in_stream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_data_V_0_ack_in == 1'b1) & (in_stream_V_data_V_0_vld_in == 1'b1))) begin
            in_stream_V_data_V_0_sel_wr <= ~in_stream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_data_V_0_state == 2'd2) & (in_stream_V_data_V_0_vld_in == 1'b0)) | ((in_stream_V_data_V_0_state == 2'd3) & (in_stream_V_data_V_0_vld_in == 1'b0) & (in_stream_V_data_V_0_ack_out == 1'b1)))) begin
            in_stream_V_data_V_0_state <= 2'd2;
        end else if ((((in_stream_V_data_V_0_state == 2'd1) & (in_stream_V_data_V_0_ack_out == 1'b0)) | ((in_stream_V_data_V_0_state == 2'd3) & (in_stream_V_data_V_0_ack_out == 1'b0) & (in_stream_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream_V_data_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_data_V_0_vld_in == 1'b0) & (in_stream_V_data_V_0_ack_out == 1'b1)) & ~((in_stream_V_data_V_0_ack_out == 1'b0) & (in_stream_V_data_V_0_vld_in == 1'b1)) & (in_stream_V_data_V_0_state == 2'd3)) | ((in_stream_V_data_V_0_state == 2'd1) & (in_stream_V_data_V_0_ack_out == 1'b1)) | ((in_stream_V_data_V_0_state == 2'd2) & (in_stream_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream_V_data_V_0_state <= 2'd3;
        end else begin
            in_stream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_dest_V_0_ack_out == 1'b1) & (in_stream_V_dest_V_0_vld_out == 1'b1))) begin
            in_stream_V_dest_V_0_sel_rd <= ~in_stream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_dest_V_0_ack_in == 1'b1) & (in_stream_V_dest_V_0_vld_in == 1'b1))) begin
            in_stream_V_dest_V_0_sel_wr <= ~in_stream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_dest_V_0_state == 2'd2) & (in_stream_V_dest_V_0_vld_in == 1'b0)) | ((in_stream_V_dest_V_0_state == 2'd3) & (in_stream_V_dest_V_0_vld_in == 1'b0) & (in_stream_V_dest_V_0_ack_out == 1'b1)))) begin
            in_stream_V_dest_V_0_state <= 2'd2;
        end else if ((((in_stream_V_dest_V_0_state == 2'd1) & (in_stream_V_dest_V_0_ack_out == 1'b0)) | ((in_stream_V_dest_V_0_state == 2'd3) & (in_stream_V_dest_V_0_ack_out == 1'b0) & (in_stream_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_dest_V_0_vld_in == 1'b0) & (in_stream_V_dest_V_0_ack_out == 1'b1)) & ~((in_stream_V_dest_V_0_ack_out == 1'b0) & (in_stream_V_dest_V_0_vld_in == 1'b1)) & (in_stream_V_dest_V_0_state == 2'd3)) | ((in_stream_V_dest_V_0_state == 2'd1) & (in_stream_V_dest_V_0_ack_out == 1'b1)) | ((in_stream_V_dest_V_0_state == 2'd2) & (in_stream_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_V_dest_V_0_state <= 2'd3;
        end else begin
            in_stream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_id_V_0_ack_out == 1'b1) & (in_stream_V_id_V_0_vld_out == 1'b1))) begin
            in_stream_V_id_V_0_sel_rd <= ~in_stream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_id_V_0_ack_in == 1'b1) & (in_stream_V_id_V_0_vld_in == 1'b1))) begin
            in_stream_V_id_V_0_sel_wr <= ~in_stream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_id_V_0_state == 2'd2) & (in_stream_V_id_V_0_vld_in == 1'b0)) | ((in_stream_V_id_V_0_state == 2'd3) & (in_stream_V_id_V_0_vld_in == 1'b0) & (in_stream_V_id_V_0_ack_out == 1'b1)))) begin
            in_stream_V_id_V_0_state <= 2'd2;
        end else if ((((in_stream_V_id_V_0_state == 2'd1) & (in_stream_V_id_V_0_ack_out == 1'b0)) | ((in_stream_V_id_V_0_state == 2'd3) & (in_stream_V_id_V_0_ack_out == 1'b0) & (in_stream_V_id_V_0_vld_in == 1'b1)))) begin
            in_stream_V_id_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_id_V_0_vld_in == 1'b0) & (in_stream_V_id_V_0_ack_out == 1'b1)) & ~((in_stream_V_id_V_0_ack_out == 1'b0) & (in_stream_V_id_V_0_vld_in == 1'b1)) & (in_stream_V_id_V_0_state == 2'd3)) | ((in_stream_V_id_V_0_state == 2'd1) & (in_stream_V_id_V_0_ack_out == 1'b1)) | ((in_stream_V_id_V_0_state == 2'd2) & (in_stream_V_id_V_0_vld_in == 1'b1)))) begin
            in_stream_V_id_V_0_state <= 2'd3;
        end else begin
            in_stream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_keep_V_0_ack_out == 1'b1) & (in_stream_V_keep_V_0_vld_out == 1'b1))) begin
            in_stream_V_keep_V_0_sel_rd <= ~in_stream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_keep_V_0_ack_in == 1'b1) & (in_stream_V_keep_V_0_vld_in == 1'b1))) begin
            in_stream_V_keep_V_0_sel_wr <= ~in_stream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_keep_V_0_state == 2'd2) & (in_stream_V_keep_V_0_vld_in == 1'b0)) | ((in_stream_V_keep_V_0_state == 2'd3) & (in_stream_V_keep_V_0_vld_in == 1'b0) & (in_stream_V_keep_V_0_ack_out == 1'b1)))) begin
            in_stream_V_keep_V_0_state <= 2'd2;
        end else if ((((in_stream_V_keep_V_0_state == 2'd1) & (in_stream_V_keep_V_0_ack_out == 1'b0)) | ((in_stream_V_keep_V_0_state == 2'd3) & (in_stream_V_keep_V_0_ack_out == 1'b0) & (in_stream_V_keep_V_0_vld_in == 1'b1)))) begin
            in_stream_V_keep_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_keep_V_0_vld_in == 1'b0) & (in_stream_V_keep_V_0_ack_out == 1'b1)) & ~((in_stream_V_keep_V_0_ack_out == 1'b0) & (in_stream_V_keep_V_0_vld_in == 1'b1)) & (in_stream_V_keep_V_0_state == 2'd3)) | ((in_stream_V_keep_V_0_state == 2'd1) & (in_stream_V_keep_V_0_ack_out == 1'b1)) | ((in_stream_V_keep_V_0_state == 2'd2) & (in_stream_V_keep_V_0_vld_in == 1'b1)))) begin
            in_stream_V_keep_V_0_state <= 2'd3;
        end else begin
            in_stream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_last_V_0_ack_out == 1'b1) & (in_stream_V_last_V_0_vld_out == 1'b1))) begin
            in_stream_V_last_V_0_sel_rd <= ~in_stream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_last_V_0_ack_in == 1'b1) & (in_stream_V_last_V_0_vld_in == 1'b1))) begin
            in_stream_V_last_V_0_sel_wr <= ~in_stream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd2;
        end else if ((((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)) & ~((in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)) & (in_stream_V_last_V_0_state == 2'd3)) | ((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b1)) | ((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd3;
        end else begin
            in_stream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_strb_V_0_ack_out == 1'b1) & (in_stream_V_strb_V_0_vld_out == 1'b1))) begin
            in_stream_V_strb_V_0_sel_rd <= ~in_stream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_strb_V_0_ack_in == 1'b1) & (in_stream_V_strb_V_0_vld_in == 1'b1))) begin
            in_stream_V_strb_V_0_sel_wr <= ~in_stream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_strb_V_0_state == 2'd2) & (in_stream_V_strb_V_0_vld_in == 1'b0)) | ((in_stream_V_strb_V_0_state == 2'd3) & (in_stream_V_strb_V_0_vld_in == 1'b0) & (in_stream_V_strb_V_0_ack_out == 1'b1)))) begin
            in_stream_V_strb_V_0_state <= 2'd2;
        end else if ((((in_stream_V_strb_V_0_state == 2'd1) & (in_stream_V_strb_V_0_ack_out == 1'b0)) | ((in_stream_V_strb_V_0_state == 2'd3) & (in_stream_V_strb_V_0_ack_out == 1'b0) & (in_stream_V_strb_V_0_vld_in == 1'b1)))) begin
            in_stream_V_strb_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_strb_V_0_vld_in == 1'b0) & (in_stream_V_strb_V_0_ack_out == 1'b1)) & ~((in_stream_V_strb_V_0_ack_out == 1'b0) & (in_stream_V_strb_V_0_vld_in == 1'b1)) & (in_stream_V_strb_V_0_state == 2'd3)) | ((in_stream_V_strb_V_0_state == 2'd1) & (in_stream_V_strb_V_0_ack_out == 1'b1)) | ((in_stream_V_strb_V_0_state == 2'd2) & (in_stream_V_strb_V_0_vld_in == 1'b1)))) begin
            in_stream_V_strb_V_0_state <= 2'd3;
        end else begin
            in_stream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_user_V_0_ack_out == 1'b1) & (in_stream_V_user_V_0_vld_out == 1'b1))) begin
            in_stream_V_user_V_0_sel_rd <= ~in_stream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_user_V_0_ack_in == 1'b1) & (in_stream_V_user_V_0_vld_in == 1'b1))) begin
            in_stream_V_user_V_0_sel_wr <= ~in_stream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_user_V_0_state == 2'd2) & (in_stream_V_user_V_0_vld_in == 1'b0)) | ((in_stream_V_user_V_0_state == 2'd3) & (in_stream_V_user_V_0_vld_in == 1'b0) & (in_stream_V_user_V_0_ack_out == 1'b1)))) begin
            in_stream_V_user_V_0_state <= 2'd2;
        end else if ((((in_stream_V_user_V_0_state == 2'd1) & (in_stream_V_user_V_0_ack_out == 1'b0)) | ((in_stream_V_user_V_0_state == 2'd3) & (in_stream_V_user_V_0_ack_out == 1'b0) & (in_stream_V_user_V_0_vld_in == 1'b1)))) begin
            in_stream_V_user_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_user_V_0_vld_in == 1'b0) & (in_stream_V_user_V_0_ack_out == 1'b1)) & ~((in_stream_V_user_V_0_ack_out == 1'b0) & (in_stream_V_user_V_0_vld_in == 1'b1)) & (in_stream_V_user_V_0_state == 2'd3)) | ((in_stream_V_user_V_0_state == 2'd1) & (in_stream_V_user_V_0_ack_out == 1'b1)) | ((in_stream_V_user_V_0_state == 2'd2) & (in_stream_V_user_V_0_vld_in == 1'b1)))) begin
            in_stream_V_user_V_0_state <= 2'd3;
        end else begin
            in_stream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_V_1_ack_out == 1'b1) & (out_stream_V_V_1_vld_out == 1'b1))) begin
            out_stream_V_V_1_sel_rd <= ~out_stream_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_V_1_ack_in == 1'b1) & (out_stream_V_V_1_vld_in == 1'b1))) begin
            out_stream_V_V_1_sel_wr <= ~out_stream_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_V_1_state == 2'd2) & (out_stream_V_V_1_vld_in == 1'b0)) | ((out_stream_V_V_1_state == 2'd3) & (out_stream_V_V_1_vld_in == 1'b0) & (out_stream_V_V_1_ack_out == 1'b1)))) begin
            out_stream_V_V_1_state <= 2'd2;
        end else if ((((out_stream_V_V_1_state == 2'd1) & (out_stream_V_V_1_ack_out == 1'b0)) | ((out_stream_V_V_1_state == 2'd3) & (out_stream_V_V_1_ack_out == 1'b0) & (out_stream_V_V_1_vld_in == 1'b1)))) begin
            out_stream_V_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_V_1_vld_in == 1'b0) & (out_stream_V_V_1_ack_out == 1'b1)) & ~((out_stream_V_V_1_ack_out == 1'b0) & (out_stream_V_V_1_vld_in == 1'b1)) & (out_stream_V_V_1_state == 2'd3)) | ((out_stream_V_V_1_state == 2'd1) & (out_stream_V_V_1_ack_out == 1'b1)) | ((out_stream_V_V_1_state == 2'd2) & (out_stream_V_V_1_vld_in == 1'b1)))) begin
            out_stream_V_V_1_state <= 2'd3;
        end else begin
            out_stream_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_V_0_load_A == 1'b1)) begin
        in_stream_V_data_V_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_V_0_load_B == 1'b1)) begin
        in_stream_V_data_V_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_dest_V_0_load_A == 1'b1)) begin
        in_stream_V_dest_V_0_payload_A <= in_stream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_dest_V_0_load_B == 1'b1)) begin
        in_stream_V_dest_V_0_payload_B <= in_stream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_id_V_0_load_A == 1'b1)) begin
        in_stream_V_id_V_0_payload_A <= in_stream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_id_V_0_load_B == 1'b1)) begin
        in_stream_V_id_V_0_payload_B <= in_stream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_keep_V_0_load_A == 1'b1)) begin
        in_stream_V_keep_V_0_payload_A <= in_stream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_keep_V_0_load_B == 1'b1)) begin
        in_stream_V_keep_V_0_payload_B <= in_stream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_last_V_0_load_A == 1'b1)) begin
        in_stream_V_last_V_0_payload_A <= in_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_last_V_0_load_B == 1'b1)) begin
        in_stream_V_last_V_0_payload_B <= in_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_strb_V_0_load_A == 1'b1)) begin
        in_stream_V_strb_V_0_payload_A <= in_stream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_strb_V_0_load_B == 1'b1)) begin
        in_stream_V_strb_V_0_payload_B <= in_stream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_user_V_0_load_A == 1'b1)) begin
        in_stream_V_user_V_0_payload_A <= in_stream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_user_V_0_load_B == 1'b1)) begin
        in_stream_V_user_V_0_payload_B <= in_stream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_V_1_load_A == 1'b1)) begin
        out_stream_V_V_1_payload_A <= out_stream_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_V_1_load_B == 1'b1)) begin
        out_stream_V_V_1_payload_B <= out_stream_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_V_reg_132 <= in_stream_V_data_V_0_data_out;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        grp_transform_level_0_fu_101_ap_continue = 1'b1;
    end else begin
        grp_transform_level_0_fu_101_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_transform_level_fu_76_ap_continue = 1'b1;
    end else begin
        grp_transform_level_fu_76_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in_stream_TDATA_blk_n = in_stream_V_data_V_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_data_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_stream_V_data_V_0_ack_out = grp_transform_level_0_fu_101_in_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_V_data_V_0_ack_out = grp_transform_level_fu_76_in_stream_TREADY;
    end else begin
        in_stream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_data_V_0_sel == 1'b1)) begin
        in_stream_V_data_V_0_data_out = in_stream_V_data_V_0_payload_B;
    end else begin
        in_stream_V_data_V_0_data_out = in_stream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_dest_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_stream_V_dest_V_0_ack_out = grp_transform_level_0_fu_101_in_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_V_dest_V_0_ack_out = grp_transform_level_fu_76_in_stream_TREADY;
    end else begin
        in_stream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_dest_V_0_sel == 1'b1)) begin
        in_stream_V_dest_V_0_data_out = in_stream_V_dest_V_0_payload_B;
    end else begin
        in_stream_V_dest_V_0_data_out = in_stream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_id_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_stream_V_id_V_0_ack_out = grp_transform_level_0_fu_101_in_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_V_id_V_0_ack_out = grp_transform_level_fu_76_in_stream_TREADY;
    end else begin
        in_stream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_id_V_0_sel == 1'b1)) begin
        in_stream_V_id_V_0_data_out = in_stream_V_id_V_0_payload_B;
    end else begin
        in_stream_V_id_V_0_data_out = in_stream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_keep_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_stream_V_keep_V_0_ack_out = grp_transform_level_0_fu_101_in_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_V_keep_V_0_ack_out = grp_transform_level_fu_76_in_stream_TREADY;
    end else begin
        in_stream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_keep_V_0_sel == 1'b1)) begin
        in_stream_V_keep_V_0_data_out = in_stream_V_keep_V_0_payload_B;
    end else begin
        in_stream_V_keep_V_0_data_out = in_stream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_last_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_stream_V_last_V_0_ack_out = grp_transform_level_0_fu_101_in_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_V_last_V_0_ack_out = grp_transform_level_fu_76_in_stream_TREADY;
    end else begin
        in_stream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_last_V_0_sel == 1'b1)) begin
        in_stream_V_last_V_0_data_out = in_stream_V_last_V_0_payload_B;
    end else begin
        in_stream_V_last_V_0_data_out = in_stream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_strb_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_stream_V_strb_V_0_ack_out = grp_transform_level_0_fu_101_in_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_V_strb_V_0_ack_out = grp_transform_level_fu_76_in_stream_TREADY;
    end else begin
        in_stream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_strb_V_0_sel == 1'b1)) begin
        in_stream_V_strb_V_0_data_out = in_stream_V_strb_V_0_payload_B;
    end else begin
        in_stream_V_strb_V_0_data_out = in_stream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_V_user_V_0_ack_out = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_stream_V_user_V_0_ack_out = grp_transform_level_0_fu_101_in_stream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_V_user_V_0_ack_out = grp_transform_level_fu_76_in_stream_TREADY;
    end else begin
        in_stream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_user_V_0_sel == 1'b1)) begin
        in_stream_V_user_V_0_data_out = in_stream_V_user_V_0_payload_B;
    end else begin
        in_stream_V_user_V_0_data_out = in_stream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_8_fu_126_p2 == 1'd1) & (in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_stream_V_V_1_data_in = 8'd0;
    end else if (((tmp_8_fu_126_p2 == 1'd0) & (in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_stream_V_V_1_data_in = in_stream_V_data_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_transform_level_0_fu_101_out_stream_V_V_TVALID == 1'b1))) begin
        out_stream_V_V_1_data_in = grp_transform_level_0_fu_101_out_stream_V_V_TDATA;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_transform_level_fu_76_out_stream_V_V_TVALID == 1'b1))) begin
        out_stream_V_V_1_data_in = grp_transform_level_fu_76_out_stream_V_V_TDATA;
    end else begin
        out_stream_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_stream_V_V_1_sel == 1'b1)) begin
        out_stream_V_V_1_data_out = out_stream_V_V_1_payload_B;
    end else begin
        out_stream_V_V_1_data_out = out_stream_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (tmp_8_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (tmp_8_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_stream_V_V_1_vld_in = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        out_stream_V_V_1_vld_in = grp_transform_level_0_fu_101_out_stream_V_V_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_stream_V_V_1_vld_in = grp_transform_level_fu_76_out_stream_V_V_TVALID;
    end else begin
        out_stream_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | ((tmp_8_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_8_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_stream_V_V_TDATA_blk_n = out_stream_V_V_1_state[1'd1];
    end else begin
        out_stream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (tmp_8_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((1'b1 == ap_block_state1_io) | (in_stream_V_data_V_0_vld_out == 1'b0)) & (tmp_8_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((out_stream_V_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((out_stream_V_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((out_stream_V_V_1_ack_in == 1'b1) & (out_stream_V_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1_io = (((tmp_8_fu_126_p2 == 1'd1) & (out_stream_V_V_1_ack_in == 1'b0)) | ((tmp_8_fu_126_p2 == 1'd0) & (out_stream_V_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_transform_level_fu_76_ap_ready & ap_sync_grp_transform_level_fu_76_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state7_on_subcall_done = ((ap_sync_grp_transform_level_0_fu_101_ap_ready & ap_sync_grp_transform_level_0_fu_101_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_transform_level_0_fu_101_ap_done = (grp_transform_level_0_fu_101_ap_done | ap_sync_reg_grp_transform_level_0_fu_101_ap_done);

assign ap_sync_grp_transform_level_0_fu_101_ap_ready = (grp_transform_level_0_fu_101_ap_ready | ap_sync_reg_grp_transform_level_0_fu_101_ap_ready);

assign ap_sync_grp_transform_level_fu_76_ap_done = (grp_transform_level_fu_76_ap_done | ap_sync_reg_grp_transform_level_fu_76_ap_done);

assign ap_sync_grp_transform_level_fu_76_ap_ready = (grp_transform_level_fu_76_ap_ready | ap_sync_reg_grp_transform_level_fu_76_ap_ready);

assign grp_transform_level_0_fu_101_ap_start = grp_transform_level_0_fu_101_ap_start_reg;

assign grp_transform_level_0_fu_101_in_stream_TVALID = in_stream_V_dest_V_0_state[1'd0];

assign grp_transform_level_0_fu_101_out_stream_V_V_TREADY = (out_stream_V_V_1_ack_in & ap_CS_fsm_state7);

assign grp_transform_level_fu_76_ap_start = grp_transform_level_fu_76_ap_start_reg;

assign grp_transform_level_fu_76_in_stream_TVALID = in_stream_V_dest_V_0_state[1'd0];

assign grp_transform_level_fu_76_out_stream_V_V_TREADY = (out_stream_V_V_1_ack_in & ap_CS_fsm_state4);

assign in_stream_TREADY = in_stream_V_dest_V_0_state[1'd1];

assign in_stream_V_data_V_0_ack_in = in_stream_V_data_V_0_state[1'd1];

assign in_stream_V_data_V_0_load_A = (in_stream_V_data_V_0_state_cmp_full & ~in_stream_V_data_V_0_sel_wr);

assign in_stream_V_data_V_0_load_B = (in_stream_V_data_V_0_state_cmp_full & in_stream_V_data_V_0_sel_wr);

assign in_stream_V_data_V_0_sel = in_stream_V_data_V_0_sel_rd;

assign in_stream_V_data_V_0_state_cmp_full = ((in_stream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_data_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_data_V_0_vld_out = in_stream_V_data_V_0_state[1'd0];

assign in_stream_V_dest_V_0_ack_in = in_stream_V_dest_V_0_state[1'd1];

assign in_stream_V_dest_V_0_load_A = (in_stream_V_dest_V_0_state_cmp_full & ~in_stream_V_dest_V_0_sel_wr);

assign in_stream_V_dest_V_0_load_B = (in_stream_V_dest_V_0_state_cmp_full & in_stream_V_dest_V_0_sel_wr);

assign in_stream_V_dest_V_0_sel = in_stream_V_dest_V_0_sel_rd;

assign in_stream_V_dest_V_0_state_cmp_full = ((in_stream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_dest_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_dest_V_0_vld_out = in_stream_V_dest_V_0_state[1'd0];

assign in_stream_V_id_V_0_ack_in = in_stream_V_id_V_0_state[1'd1];

assign in_stream_V_id_V_0_load_A = (in_stream_V_id_V_0_state_cmp_full & ~in_stream_V_id_V_0_sel_wr);

assign in_stream_V_id_V_0_load_B = (in_stream_V_id_V_0_state_cmp_full & in_stream_V_id_V_0_sel_wr);

assign in_stream_V_id_V_0_sel = in_stream_V_id_V_0_sel_rd;

assign in_stream_V_id_V_0_state_cmp_full = ((in_stream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_id_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_id_V_0_vld_out = in_stream_V_id_V_0_state[1'd0];

assign in_stream_V_keep_V_0_ack_in = in_stream_V_keep_V_0_state[1'd1];

assign in_stream_V_keep_V_0_load_A = (in_stream_V_keep_V_0_state_cmp_full & ~in_stream_V_keep_V_0_sel_wr);

assign in_stream_V_keep_V_0_load_B = (in_stream_V_keep_V_0_state_cmp_full & in_stream_V_keep_V_0_sel_wr);

assign in_stream_V_keep_V_0_sel = in_stream_V_keep_V_0_sel_rd;

assign in_stream_V_keep_V_0_state_cmp_full = ((in_stream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_keep_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_keep_V_0_vld_out = in_stream_V_keep_V_0_state[1'd0];

assign in_stream_V_last_V_0_ack_in = in_stream_V_last_V_0_state[1'd1];

assign in_stream_V_last_V_0_load_A = (in_stream_V_last_V_0_state_cmp_full & ~in_stream_V_last_V_0_sel_wr);

assign in_stream_V_last_V_0_load_B = (in_stream_V_last_V_0_state_cmp_full & in_stream_V_last_V_0_sel_wr);

assign in_stream_V_last_V_0_sel = in_stream_V_last_V_0_sel_rd;

assign in_stream_V_last_V_0_state_cmp_full = ((in_stream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_last_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_last_V_0_vld_out = in_stream_V_last_V_0_state[1'd0];

assign in_stream_V_strb_V_0_ack_in = in_stream_V_strb_V_0_state[1'd1];

assign in_stream_V_strb_V_0_load_A = (in_stream_V_strb_V_0_state_cmp_full & ~in_stream_V_strb_V_0_sel_wr);

assign in_stream_V_strb_V_0_load_B = (in_stream_V_strb_V_0_state_cmp_full & in_stream_V_strb_V_0_sel_wr);

assign in_stream_V_strb_V_0_sel = in_stream_V_strb_V_0_sel_rd;

assign in_stream_V_strb_V_0_state_cmp_full = ((in_stream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_strb_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_strb_V_0_vld_out = in_stream_V_strb_V_0_state[1'd0];

assign in_stream_V_user_V_0_ack_in = in_stream_V_user_V_0_state[1'd1];

assign in_stream_V_user_V_0_load_A = (in_stream_V_user_V_0_state_cmp_full & ~in_stream_V_user_V_0_sel_wr);

assign in_stream_V_user_V_0_load_B = (in_stream_V_user_V_0_state_cmp_full & in_stream_V_user_V_0_sel_wr);

assign in_stream_V_user_V_0_sel = in_stream_V_user_V_0_sel_rd;

assign in_stream_V_user_V_0_state_cmp_full = ((in_stream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_user_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_user_V_0_vld_out = in_stream_V_user_V_0_state[1'd0];

assign out_stream_V_V_1_ack_in = out_stream_V_V_1_state[1'd1];

assign out_stream_V_V_1_ack_out = out_stream_V_V_TREADY;

assign out_stream_V_V_1_load_A = (out_stream_V_V_1_state_cmp_full & ~out_stream_V_V_1_sel_wr);

assign out_stream_V_V_1_load_B = (out_stream_V_V_1_state_cmp_full & out_stream_V_V_1_sel_wr);

assign out_stream_V_V_1_sel = out_stream_V_V_1_sel_rd;

assign out_stream_V_V_1_state_cmp_full = ((out_stream_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_V_1_vld_out = out_stream_V_V_1_state[1'd0];

assign out_stream_V_V_TDATA = out_stream_V_V_1_data_out;

assign out_stream_V_V_TVALID = out_stream_V_V_1_state[1'd0];

assign tmp_8_fu_126_p2 = ((in_stream_V_data_V_0_data_out == 8'd0) ? 1'b1 : 1'b0);

endmodule //transform
