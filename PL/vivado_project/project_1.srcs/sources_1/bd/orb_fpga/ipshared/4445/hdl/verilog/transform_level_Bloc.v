// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transform_level_Bloc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_level_V_dout,
        img_level_V_empty_n,
        img_level_V_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] img_level_V_dout;
input   img_level_V_empty_n;
output   img_level_V_read;
output  [8:0] ap_return_0;
output  [9:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_level_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] resize_height1_address0;
reg    resize_height1_ce0;
wire   [8:0] resize_height1_q0;
wire   [1:0] resize_width2_address0;
reg    resize_width2_ce0;
wire   [9:0] resize_width2_q0;
reg    img_level_V_blk_n;
reg    ap_block_state1;
wire   [63:0] tmp_i_fu_58_p1;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

transform_level_Bbkb #(
    .DataWidth( 9 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
resize_height1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(resize_height1_address0),
    .ce0(resize_height1_ce0),
    .q0(resize_height1_q0)
);

transform_level_Bcud #(
    .DataWidth( 10 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
resize_width2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(resize_width2_address0),
    .ce0(resize_width2_ce0),
    .q0(resize_width2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_level_V_blk_n = img_level_V_empty_n;
    end else begin
        img_level_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_level_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_level_V_read = 1'b1;
    end else begin
        img_level_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_level_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        resize_height1_ce0 = 1'b1;
    end else begin
        resize_height1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_level_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        resize_width2_ce0 = 1'b1;
    end else begin
        resize_width2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_level_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_level_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = resize_height1_q0;

assign ap_return_1 = resize_width2_q0;

assign resize_height1_address0 = tmp_i_fu_58_p1;

assign resize_width2_address0 = tmp_i_fu_58_p1;

assign tmp_i_fu_58_p1 = img_level_V_dout;

endmodule //transform_level_Bloc
