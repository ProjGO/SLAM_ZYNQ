// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transform_level (
        in_stream_TDATA,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        out_stream_V_V_TDATA,
        img_level_V,
        ap_clk,
        ap_rst,
        img_level_V_ap_vld,
        ap_start,
        in_stream_TVALID,
        in_stream_TREADY,
        out_stream_V_V_TVALID,
        out_stream_V_V_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] in_stream_TDATA;
input  [0:0] in_stream_TKEEP;
input  [0:0] in_stream_TSTRB;
input  [0:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [0:0] in_stream_TID;
input  [0:0] in_stream_TDEST;
output  [7:0] out_stream_V_V_TDATA;
input  [7:0] img_level_V;
input   ap_clk;
input   ap_rst;
input   img_level_V_ap_vld;
input   ap_start;
input   in_stream_TVALID;
output   in_stream_TREADY;
output   out_stream_V_V_TVALID;
input   out_stream_V_V_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    transform_level_entr_1_U0_ap_start;
wire    transform_level_entr_1_U0_ap_done;
wire    transform_level_entr_1_U0_ap_continue;
wire    transform_level_entr_1_U0_ap_idle;
wire    transform_level_entr_1_U0_ap_ready;
wire    transform_level_entr_1_U0_start_out;
wire    transform_level_entr_1_U0_start_write;
wire   [7:0] transform_level_entr_1_U0_img_level_V_out_din;
wire    transform_level_entr_1_U0_img_level_V_out_write;
wire    transform_level_entr_1_1_U0_ap_start;
wire    transform_level_entr_1_1_U0_ap_done;
wire    transform_level_entr_1_1_U0_ap_continue;
wire    transform_level_entr_1_1_U0_ap_idle;
wire    transform_level_entr_1_1_U0_ap_ready;
wire    transform_level_entr_1_1_U0_start_out;
wire    transform_level_entr_1_1_U0_start_write;
wire    transform_level_entr_1_1_U0_img_level_V_read;
wire   [7:0] transform_level_entr_1_1_U0_img_level_V_out_din;
wire    transform_level_entr_1_1_U0_img_level_V_out_write;
wire    transform_level_Loop_U0_ap_start;
wire    transform_level_Loop_U0_ap_done;
wire    transform_level_Loop_U0_ap_continue;
wire    transform_level_Loop_U0_ap_idle;
wire    transform_level_Loop_U0_ap_ready;
wire    transform_level_Loop_U0_in_stream_TREADY;
wire   [7:0] transform_level_Loop_U0_src_bw_data_stream_0_V_din;
wire    transform_level_Loop_U0_src_bw_data_stream_0_V_write;
wire    transform_level_Bloc_U0_ap_start;
wire    transform_level_Bloc_U0_ap_done;
wire    transform_level_Bloc_U0_ap_continue;
wire    transform_level_Bloc_U0_ap_idle;
wire    transform_level_Bloc_U0_ap_ready;
wire    transform_level_Bloc_U0_img_level_V_read;
wire   [8:0] transform_level_Bloc_U0_ap_return_0;
wire   [9:0] transform_level_Bloc_U0_ap_return_1;
wire    ap_channel_done_resize_width2_load_l;
wire    resize_width2_load_l_full_n;
reg    ap_sync_reg_channel_write_resize_width2_load_l;
wire    ap_sync_channel_write_resize_width2_load_l;
wire    ap_channel_done_resize_height1_load_s;
wire    resize_height1_load_s_full_n;
reg    ap_sync_reg_channel_write_resize_height1_load_s;
wire    ap_sync_channel_write_resize_height1_load_s;
wire    Resize_opr_linear_le_U0_ap_start;
wire    Resize_opr_linear_le_U0_ap_done;
wire    Resize_opr_linear_le_U0_ap_continue;
wire    Resize_opr_linear_le_U0_ap_idle;
wire    Resize_opr_linear_le_U0_ap_ready;
wire    Resize_opr_linear_le_U0_p_src_data_stream_V_read;
wire   [7:0] Resize_opr_linear_le_U0_out_stream_V_V_TDATA;
wire    Resize_opr_linear_le_U0_out_stream_V_V_TVALID;
wire    ap_sync_continue;
wire    img_level_V_c1_full_n;
wire   [7:0] img_level_V_c1_dout;
wire    img_level_V_c1_empty_n;
wire    img_level_V_c_full_n;
wire   [7:0] img_level_V_c_dout;
wire    img_level_V_c_empty_n;
wire    src_bw_data_stream_0_full_n;
wire   [7:0] src_bw_data_stream_0_dout;
wire    src_bw_data_stream_0_empty_n;
wire   [8:0] resize_height1_load_s_dout;
wire    resize_height1_load_s_empty_n;
wire   [9:0] resize_width2_load_l_dout;
wire    resize_width2_load_l_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_transform_level_entr_1_U0_ap_ready;
wire    ap_sync_transform_level_entr_1_U0_ap_ready;
reg   [1:0] transform_level_entr_1_U0_ap_ready_count;
reg    ap_sync_reg_transform_level_Loop_U0_ap_ready;
wire    ap_sync_transform_level_Loop_U0_ap_ready;
reg   [1:0] transform_level_Loop_U0_ap_ready_count;
wire   [0:0] start_for_transform_level_entr_1_1_U0_din;
wire    start_for_transform_level_entr_1_1_U0_full_n;
wire   [0:0] start_for_transform_level_entr_1_1_U0_dout;
wire    start_for_transform_level_entr_1_1_U0_empty_n;
wire   [0:0] start_for_transform_level_Bloc_U0_din;
wire    start_for_transform_level_Bloc_U0_full_n;
wire   [0:0] start_for_transform_level_Bloc_U0_dout;
wire    start_for_transform_level_Bloc_U0_empty_n;
wire    transform_level_Loop_U0_start_full_n;
wire    transform_level_Loop_U0_start_write;
wire    transform_level_Bloc_U0_start_full_n;
wire    transform_level_Bloc_U0_start_write;
wire    Resize_opr_linear_le_U0_start_full_n;
wire    Resize_opr_linear_le_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_resize_width2_load_l = 1'b0;
#0 ap_sync_reg_channel_write_resize_height1_load_s = 1'b0;
#0 ap_sync_reg_transform_level_entr_1_U0_ap_ready = 1'b0;
#0 transform_level_entr_1_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_transform_level_Loop_U0_ap_ready = 1'b0;
#0 transform_level_Loop_U0_ap_ready_count = 2'd0;
end

transform_level_entr_1 transform_level_entr_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(transform_level_entr_1_U0_ap_start),
    .start_full_n(start_for_transform_level_entr_1_1_U0_full_n),
    .ap_done(transform_level_entr_1_U0_ap_done),
    .ap_continue(transform_level_entr_1_U0_ap_continue),
    .ap_idle(transform_level_entr_1_U0_ap_idle),
    .ap_ready(transform_level_entr_1_U0_ap_ready),
    .start_out(transform_level_entr_1_U0_start_out),
    .start_write(transform_level_entr_1_U0_start_write),
    .img_level_V(img_level_V),
    .img_level_V_out_din(transform_level_entr_1_U0_img_level_V_out_din),
    .img_level_V_out_full_n(img_level_V_c1_full_n),
    .img_level_V_out_write(transform_level_entr_1_U0_img_level_V_out_write)
);

transform_level_entr_1_1 transform_level_entr_1_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(transform_level_entr_1_1_U0_ap_start),
    .start_full_n(start_for_transform_level_Bloc_U0_full_n),
    .ap_done(transform_level_entr_1_1_U0_ap_done),
    .ap_continue(transform_level_entr_1_1_U0_ap_continue),
    .ap_idle(transform_level_entr_1_1_U0_ap_idle),
    .ap_ready(transform_level_entr_1_1_U0_ap_ready),
    .start_out(transform_level_entr_1_1_U0_start_out),
    .start_write(transform_level_entr_1_1_U0_start_write),
    .img_level_V_dout(img_level_V_c1_dout),
    .img_level_V_empty_n(img_level_V_c1_empty_n),
    .img_level_V_read(transform_level_entr_1_1_U0_img_level_V_read),
    .img_level_V_out_din(transform_level_entr_1_1_U0_img_level_V_out_din),
    .img_level_V_out_full_n(img_level_V_c_full_n),
    .img_level_V_out_write(transform_level_entr_1_1_U0_img_level_V_out_write)
);

transform_level_Loop transform_level_Loop_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(transform_level_Loop_U0_ap_start),
    .ap_done(transform_level_Loop_U0_ap_done),
    .ap_continue(transform_level_Loop_U0_ap_continue),
    .ap_idle(transform_level_Loop_U0_ap_idle),
    .ap_ready(transform_level_Loop_U0_ap_ready),
    .in_stream_TDATA(in_stream_TDATA),
    .in_stream_TVALID(in_stream_TVALID),
    .in_stream_TREADY(transform_level_Loop_U0_in_stream_TREADY),
    .in_stream_TKEEP(in_stream_TKEEP),
    .in_stream_TSTRB(in_stream_TSTRB),
    .in_stream_TUSER(in_stream_TUSER),
    .in_stream_TLAST(in_stream_TLAST),
    .in_stream_TID(in_stream_TID),
    .in_stream_TDEST(in_stream_TDEST),
    .src_bw_data_stream_0_V_din(transform_level_Loop_U0_src_bw_data_stream_0_V_din),
    .src_bw_data_stream_0_V_full_n(src_bw_data_stream_0_full_n),
    .src_bw_data_stream_0_V_write(transform_level_Loop_U0_src_bw_data_stream_0_V_write)
);

transform_level_Bloc transform_level_Bloc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(transform_level_Bloc_U0_ap_start),
    .ap_done(transform_level_Bloc_U0_ap_done),
    .ap_continue(transform_level_Bloc_U0_ap_continue),
    .ap_idle(transform_level_Bloc_U0_ap_idle),
    .ap_ready(transform_level_Bloc_U0_ap_ready),
    .img_level_V_dout(img_level_V_c_dout),
    .img_level_V_empty_n(img_level_V_c_empty_n),
    .img_level_V_read(transform_level_Bloc_U0_img_level_V_read),
    .ap_return_0(transform_level_Bloc_U0_ap_return_0),
    .ap_return_1(transform_level_Bloc_U0_ap_return_1)
);

Resize_opr_linear_le Resize_opr_linear_le_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Resize_opr_linear_le_U0_ap_start),
    .ap_done(Resize_opr_linear_le_U0_ap_done),
    .ap_continue(Resize_opr_linear_le_U0_ap_continue),
    .ap_idle(Resize_opr_linear_le_U0_ap_idle),
    .ap_ready(Resize_opr_linear_le_U0_ap_ready),
    .p_src_data_stream_V_dout(src_bw_data_stream_0_dout),
    .p_src_data_stream_V_empty_n(src_bw_data_stream_0_empty_n),
    .p_src_data_stream_V_read(Resize_opr_linear_le_U0_p_src_data_stream_V_read),
    .drows(resize_height1_load_s_dout),
    .dcols(resize_width2_load_l_dout),
    .out_stream_V_V_TDATA(Resize_opr_linear_le_U0_out_stream_V_V_TDATA),
    .out_stream_V_V_TVALID(Resize_opr_linear_le_U0_out_stream_V_V_TVALID),
    .out_stream_V_V_TREADY(out_stream_V_V_TREADY)
);

fifo_w8_d2_A img_level_V_c1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(transform_level_entr_1_U0_img_level_V_out_din),
    .if_full_n(img_level_V_c1_full_n),
    .if_write(transform_level_entr_1_U0_img_level_V_out_write),
    .if_dout(img_level_V_c1_dout),
    .if_empty_n(img_level_V_c1_empty_n),
    .if_read(transform_level_entr_1_1_U0_img_level_V_read)
);

fifo_w8_d2_A img_level_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(transform_level_entr_1_1_U0_img_level_V_out_din),
    .if_full_n(img_level_V_c_full_n),
    .if_write(transform_level_entr_1_1_U0_img_level_V_out_write),
    .if_dout(img_level_V_c_dout),
    .if_empty_n(img_level_V_c_empty_n),
    .if_read(transform_level_Bloc_U0_img_level_V_read)
);

fifo_w8_d2_A src_bw_data_stream_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(transform_level_Loop_U0_src_bw_data_stream_0_V_din),
    .if_full_n(src_bw_data_stream_0_full_n),
    .if_write(transform_level_Loop_U0_src_bw_data_stream_0_V_write),
    .if_dout(src_bw_data_stream_0_dout),
    .if_empty_n(src_bw_data_stream_0_empty_n),
    .if_read(Resize_opr_linear_le_U0_p_src_data_stream_V_read)
);

fifo_w9_d2_A resize_height1_load_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(transform_level_Bloc_U0_ap_return_0),
    .if_full_n(resize_height1_load_s_full_n),
    .if_write(ap_channel_done_resize_height1_load_s),
    .if_dout(resize_height1_load_s_dout),
    .if_empty_n(resize_height1_load_s_empty_n),
    .if_read(Resize_opr_linear_le_U0_ap_ready)
);

fifo_w10_d2_A resize_width2_load_l_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(transform_level_Bloc_U0_ap_return_1),
    .if_full_n(resize_width2_load_l_full_n),
    .if_write(ap_channel_done_resize_width2_load_l),
    .if_dout(resize_width2_load_l_dout),
    .if_empty_n(resize_width2_load_l_empty_n),
    .if_read(Resize_opr_linear_le_U0_ap_ready)
);

start_for_transfokbM start_for_transfokbM_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_transform_level_entr_1_1_U0_din),
    .if_full_n(start_for_transform_level_entr_1_1_U0_full_n),
    .if_write(transform_level_entr_1_U0_start_write),
    .if_dout(start_for_transform_level_entr_1_1_U0_dout),
    .if_empty_n(start_for_transform_level_entr_1_1_U0_empty_n),
    .if_read(transform_level_entr_1_1_U0_ap_ready)
);

start_for_transfolbW start_for_transfolbW_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_transform_level_Bloc_U0_din),
    .if_full_n(start_for_transform_level_Bloc_U0_full_n),
    .if_write(transform_level_entr_1_1_U0_start_write),
    .if_dout(start_for_transform_level_Bloc_U0_dout),
    .if_empty_n(start_for_transform_level_Bloc_U0_empty_n),
    .if_read(transform_level_Bloc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_resize_height1_load_s <= 1'b0;
    end else begin
        if (((transform_level_Bloc_U0_ap_done & transform_level_Bloc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_resize_height1_load_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_resize_height1_load_s <= ap_sync_channel_write_resize_height1_load_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_resize_width2_load_l <= 1'b0;
    end else begin
        if (((transform_level_Bloc_U0_ap_done & transform_level_Bloc_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_resize_width2_load_l <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_resize_width2_load_l <= ap_sync_channel_write_resize_width2_load_l;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_transform_level_Loop_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_transform_level_Loop_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_transform_level_Loop_U0_ap_ready <= ap_sync_transform_level_Loop_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_transform_level_entr_1_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_transform_level_entr_1_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_transform_level_entr_1_U0_ap_ready <= ap_sync_transform_level_entr_1_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((transform_level_Loop_U0_ap_ready == 1'b0) & (ap_sync_ready == 1'b1))) begin
        transform_level_Loop_U0_ap_ready_count <= (transform_level_Loop_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (transform_level_Loop_U0_ap_ready == 1'b1))) begin
        transform_level_Loop_U0_ap_ready_count <= (transform_level_Loop_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (transform_level_entr_1_U0_ap_ready == 1'b0))) begin
        transform_level_entr_1_U0_ap_ready_count <= (transform_level_entr_1_U0_ap_ready_count - 2'd1);
    end else if (((ap_sync_ready == 1'b0) & (transform_level_entr_1_U0_ap_ready == 1'b1))) begin
        transform_level_entr_1_U0_ap_ready_count <= (transform_level_entr_1_U0_ap_ready_count + 2'd1);
    end
end

assign Resize_opr_linear_le_U0_ap_continue = ap_continue;

assign Resize_opr_linear_le_U0_ap_start = (resize_width2_load_l_empty_n & resize_height1_load_s_empty_n);

assign Resize_opr_linear_le_U0_start_full_n = 1'b1;

assign Resize_opr_linear_le_U0_start_write = 1'b0;

assign ap_channel_done_resize_height1_load_s = (transform_level_Bloc_U0_ap_done & (ap_sync_reg_channel_write_resize_height1_load_s ^ 1'b1));

assign ap_channel_done_resize_width2_load_l = (transform_level_Bloc_U0_ap_done & (ap_sync_reg_channel_write_resize_width2_load_l ^ 1'b1));

assign ap_done = Resize_opr_linear_le_U0_ap_done;

assign ap_idle = (transform_level_entr_1_U0_ap_idle & transform_level_entr_1_1_U0_ap_idle & transform_level_Loop_U0_ap_idle & transform_level_Bloc_U0_ap_idle & (resize_width2_load_l_empty_n ^ 1'b1) & (resize_height1_load_s_empty_n ^ 1'b1) & Resize_opr_linear_le_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_resize_height1_load_s = ((resize_height1_load_s_full_n & ap_channel_done_resize_height1_load_s) | ap_sync_reg_channel_write_resize_height1_load_s);

assign ap_sync_channel_write_resize_width2_load_l = ((resize_width2_load_l_full_n & ap_channel_done_resize_width2_load_l) | ap_sync_reg_channel_write_resize_width2_load_l);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = Resize_opr_linear_le_U0_ap_done;

assign ap_sync_ready = (ap_sync_transform_level_entr_1_U0_ap_ready & ap_sync_transform_level_Loop_U0_ap_ready);

assign ap_sync_transform_level_Loop_U0_ap_ready = (transform_level_Loop_U0_ap_ready | ap_sync_reg_transform_level_Loop_U0_ap_ready);

assign ap_sync_transform_level_entr_1_U0_ap_ready = (transform_level_entr_1_U0_ap_ready | ap_sync_reg_transform_level_entr_1_U0_ap_ready);

assign in_stream_TREADY = transform_level_Loop_U0_in_stream_TREADY;

assign out_stream_V_V_TDATA = Resize_opr_linear_le_U0_out_stream_V_V_TDATA;

assign out_stream_V_V_TVALID = Resize_opr_linear_le_U0_out_stream_V_V_TVALID;

assign start_for_transform_level_Bloc_U0_din = 1'b1;

assign start_for_transform_level_entr_1_1_U0_din = 1'b1;

assign transform_level_Bloc_U0_ap_continue = (ap_sync_channel_write_resize_width2_load_l & ap_sync_channel_write_resize_height1_load_s);

assign transform_level_Bloc_U0_ap_start = start_for_transform_level_Bloc_U0_empty_n;

assign transform_level_Bloc_U0_start_full_n = 1'b1;

assign transform_level_Bloc_U0_start_write = 1'b0;

assign transform_level_Loop_U0_ap_continue = 1'b1;

assign transform_level_Loop_U0_ap_start = ((ap_sync_reg_transform_level_Loop_U0_ap_ready ^ 1'b1) & ap_start);

assign transform_level_Loop_U0_start_full_n = 1'b1;

assign transform_level_Loop_U0_start_write = 1'b0;

assign transform_level_entr_1_1_U0_ap_continue = 1'b1;

assign transform_level_entr_1_1_U0_ap_start = start_for_transform_level_entr_1_1_U0_empty_n;

assign transform_level_entr_1_U0_ap_continue = 1'b1;

assign transform_level_entr_1_U0_ap_start = ((ap_sync_reg_transform_level_entr_1_U0_ap_ready ^ 1'b1) & ap_start);

endmodule //transform_level
